Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    MAIN

Grammar

Rule 0     S' -> program
Rule 1     program -> declstar
Rule 2     decl -> function
Rule 3     decl -> vardecl
Rule 4     declstar -> decl
Rule 5     declstar -> declstar decl
Rule 6     ty -> BOOL
Rule 7     ty -> INT
Rule 8     function -> DEF IDENT LPAREN paramlist RPAREN block
Rule 9     function -> DEF IDENT LPAREN paramlist RPAREN COLON ty block
Rule 10    function -> DEF IDENT LPAREN RPAREN block
Rule 11    function -> DEF IDENT LPAREN RPAREN COLON ty block
Rule 12    identlist -> IDENT
Rule 13    identlist -> IDENT COMMA identlist
Rule 14    param -> identlist COLON ty
Rule 15    param -> IDENT COLON ty
Rule 16    paramlist -> param
Rule 17    paramlist -> param COMMA paramlist
Rule 18    block -> LBRACE stmts RBRACE
Rule 19    stmts -> stmtstar
Rule 20    stmtstar -> <empty>
Rule 21    stmtstar -> stmtstar stmt
Rule 22    vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON
Rule 23    stmt -> vardecl
Rule 24    stmt -> CONTINUE SEMICOLON
Rule 25    stmt -> block
Rule 26    stmt -> BREAK SEMICOLON
Rule 27    stmt -> PRINT LPAREN expr RPAREN SEMICOLON
Rule 28    stmt -> IDENT EQUALS expr SEMICOLON
Rule 29    stmt -> IF LPAREN expr RPAREN block
Rule 30    stmt -> IF LPAREN expr RPAREN block ELSE block
Rule 31    stmt -> WHILE LPAREN expr RPAREN block
Rule 32    expr -> NUMBER
Rule 33    expr -> TRUE
Rule 34    expr -> FALSE
Rule 35    expr -> IDENT
Rule 36    expr -> TILDE expr
Rule 37    expr -> MINUS expr
Rule 38    expr -> BANG expr
Rule 39    expr -> LPAREN expr RPAREN
Rule 40    expr -> expr ANDAND expr
Rule 41    expr -> expr PLUS expr
Rule 42    expr -> expr OROR expr
Rule 43    expr -> expr MINUS expr
Rule 44    expr -> expr TIMES expr
Rule 45    expr -> expr DIVIDE expr
Rule 46    expr -> expr EQUALSEQUALS expr
Rule 47    expr -> expr MOD expr
Rule 48    expr -> expr XOR expr
Rule 49    expr -> expr AND expr
Rule 50    expr -> expr OR expr
Rule 51    expr -> expr LSHIFT expr
Rule 52    expr -> expr RSHIFT expr
Rule 53    expr -> expr LESSTHAN expr
Rule 54    expr -> expr GREATERTHAN expr
Rule 55    expr -> expr LESSTHANEQUALS expr
Rule 56    expr -> expr GREATERTHANEQUALS expr
Rule 57    expr -> expr NOTEQUALS expr

Terminals, with rules where they appear

AND                  : 49
ANDAND               : 40
BANG                 : 38
BOOL                 : 6
BREAK                : 26
COLON                : 9 11 14 15 22
COMMA                : 13 17
COMMENT              : 
CONTINUE             : 24
DEF                  : 8 9 10 11
DIVIDE               : 45
ELSE                 : 30
EQUALS               : 22 28
EQUALSEQUALS         : 46
FALSE                : 34
GREATERTHAN          : 54
GREATERTHANEQUALS    : 56
IDENT                : 8 9 10 11 12 13 15 22 28 35
IF                   : 29 30
INT                  : 7 22
LBRACE               : 18
LESSTHAN             : 53
LESSTHANEQUALS       : 55
LPAREN               : 8 9 10 11 27 29 30 31 39
LSHIFT               : 51
MAIN                 : 
MINUS                : 37 43
MOD                  : 47
NOTEQUALS            : 57
NUMBER               : 32
OR                   : 50
OROR                 : 42
PLUS                 : 41
PRINT                : 27
RBRACE               : 18
RPAREN               : 8 9 10 11 27 29 30 31 39
RSHIFT               : 52
SEMICOLON            : 22 24 26 27 28
TILDE                : 36
TIMES                : 44
TRUE                 : 33
VAR                  : 22
WHILE                : 31
XOR                  : 48
error                : 

Nonterminals, with rules where they appear

block                : 8 9 10 11 25 29 30 30 31
decl                 : 4 5
declstar             : 1 5
expr                 : 22 27 28 29 30 31 36 37 38 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57
function             : 2
identlist            : 13 14
param                : 16 17
paramlist            : 8 9 17
program              : 0
stmt                 : 21
stmts                : 18
stmtstar             : 19 21
ty                   : 9 11 14 15
vardecl              : 3 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declstar
    (4) declstar -> . decl
    (5) declstar -> . declstar decl
    (2) decl -> . function
    (3) decl -> . vardecl
    (8) function -> . DEF IDENT LPAREN paramlist RPAREN block
    (9) function -> . DEF IDENT LPAREN paramlist RPAREN COLON ty block
    (10) function -> . DEF IDENT LPAREN RPAREN block
    (11) function -> . DEF IDENT LPAREN RPAREN COLON ty block
    (22) vardecl -> . VAR IDENT EQUALS expr COLON INT SEMICOLON

    DEF             shift and go to state 6
    VAR             shift and go to state 7

    program                        shift and go to state 1
    declstar                       shift and go to state 2
    decl                           shift and go to state 3
    function                       shift and go to state 4
    vardecl                        shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> declstar .
    (5) declstar -> declstar . decl
    (2) decl -> . function
    (3) decl -> . vardecl
    (8) function -> . DEF IDENT LPAREN paramlist RPAREN block
    (9) function -> . DEF IDENT LPAREN paramlist RPAREN COLON ty block
    (10) function -> . DEF IDENT LPAREN RPAREN block
    (11) function -> . DEF IDENT LPAREN RPAREN COLON ty block
    (22) vardecl -> . VAR IDENT EQUALS expr COLON INT SEMICOLON

    $end            reduce using rule 1 (program -> declstar .)
    DEF             shift and go to state 6
    VAR             shift and go to state 7

    decl                           shift and go to state 8
    function                       shift and go to state 4
    vardecl                        shift and go to state 5

state 3

    (4) declstar -> decl .

    DEF             reduce using rule 4 (declstar -> decl .)
    VAR             reduce using rule 4 (declstar -> decl .)
    $end            reduce using rule 4 (declstar -> decl .)


state 4

    (2) decl -> function .

    DEF             reduce using rule 2 (decl -> function .)
    VAR             reduce using rule 2 (decl -> function .)
    $end            reduce using rule 2 (decl -> function .)


state 5

    (3) decl -> vardecl .

    DEF             reduce using rule 3 (decl -> vardecl .)
    VAR             reduce using rule 3 (decl -> vardecl .)
    $end            reduce using rule 3 (decl -> vardecl .)


state 6

    (8) function -> DEF . IDENT LPAREN paramlist RPAREN block
    (9) function -> DEF . IDENT LPAREN paramlist RPAREN COLON ty block
    (10) function -> DEF . IDENT LPAREN RPAREN block
    (11) function -> DEF . IDENT LPAREN RPAREN COLON ty block

    IDENT           shift and go to state 9


state 7

    (22) vardecl -> VAR . IDENT EQUALS expr COLON INT SEMICOLON

    IDENT           shift and go to state 10


state 8

    (5) declstar -> declstar decl .

    DEF             reduce using rule 5 (declstar -> declstar decl .)
    VAR             reduce using rule 5 (declstar -> declstar decl .)
    $end            reduce using rule 5 (declstar -> declstar decl .)


state 9

    (8) function -> DEF IDENT . LPAREN paramlist RPAREN block
    (9) function -> DEF IDENT . LPAREN paramlist RPAREN COLON ty block
    (10) function -> DEF IDENT . LPAREN RPAREN block
    (11) function -> DEF IDENT . LPAREN RPAREN COLON ty block

    LPAREN          shift and go to state 11


state 10

    (22) vardecl -> VAR IDENT . EQUALS expr COLON INT SEMICOLON

    EQUALS          shift and go to state 12


state 11

    (8) function -> DEF IDENT LPAREN . paramlist RPAREN block
    (9) function -> DEF IDENT LPAREN . paramlist RPAREN COLON ty block
    (10) function -> DEF IDENT LPAREN . RPAREN block
    (11) function -> DEF IDENT LPAREN . RPAREN COLON ty block
    (16) paramlist -> . param
    (17) paramlist -> . param COMMA paramlist
    (14) param -> . identlist COLON ty
    (15) param -> . IDENT COLON ty
    (12) identlist -> . IDENT
    (13) identlist -> . IDENT COMMA identlist

    RPAREN          shift and go to state 15
    IDENT           shift and go to state 13

    paramlist                      shift and go to state 14
    param                          shift and go to state 16
    identlist                      shift and go to state 17

state 12

    (22) vardecl -> VAR IDENT EQUALS . expr COLON INT SEMICOLON
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 19

state 13

    (15) param -> IDENT . COLON ty
    (12) identlist -> IDENT .
    (13) identlist -> IDENT . COMMA identlist

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 27
    COMMA           shift and go to state 28

  ! COLON           [ reduce using rule 12 (identlist -> IDENT .) ]


state 14

    (8) function -> DEF IDENT LPAREN paramlist . RPAREN block
    (9) function -> DEF IDENT LPAREN paramlist . RPAREN COLON ty block

    RPAREN          shift and go to state 29


state 15

    (10) function -> DEF IDENT LPAREN RPAREN . block
    (11) function -> DEF IDENT LPAREN RPAREN . COLON ty block
    (18) block -> . LBRACE stmts RBRACE

    COLON           shift and go to state 31
    LBRACE          shift and go to state 32

    block                          shift and go to state 30

state 16

    (16) paramlist -> param .
    (17) paramlist -> param . COMMA paramlist

    RPAREN          reduce using rule 16 (paramlist -> param .)
    COMMA           shift and go to state 33


state 17

    (14) param -> identlist . COLON ty

    COLON           shift and go to state 34


state 18

    (35) expr -> IDENT .

    COLON           reduce using rule 35 (expr -> IDENT .)
    ANDAND          reduce using rule 35 (expr -> IDENT .)
    PLUS            reduce using rule 35 (expr -> IDENT .)
    OROR            reduce using rule 35 (expr -> IDENT .)
    MINUS           reduce using rule 35 (expr -> IDENT .)
    TIMES           reduce using rule 35 (expr -> IDENT .)
    DIVIDE          reduce using rule 35 (expr -> IDENT .)
    EQUALSEQUALS    reduce using rule 35 (expr -> IDENT .)
    MOD             reduce using rule 35 (expr -> IDENT .)
    XOR             reduce using rule 35 (expr -> IDENT .)
    AND             reduce using rule 35 (expr -> IDENT .)
    OR              reduce using rule 35 (expr -> IDENT .)
    LSHIFT          reduce using rule 35 (expr -> IDENT .)
    RSHIFT          reduce using rule 35 (expr -> IDENT .)
    LESSTHAN        reduce using rule 35 (expr -> IDENT .)
    GREATERTHAN     reduce using rule 35 (expr -> IDENT .)
    LESSTHANEQUALS  reduce using rule 35 (expr -> IDENT .)
    GREATERTHANEQUALS reduce using rule 35 (expr -> IDENT .)
    NOTEQUALS       reduce using rule 35 (expr -> IDENT .)
    RPAREN          reduce using rule 35 (expr -> IDENT .)
    SEMICOLON       reduce using rule 35 (expr -> IDENT .)


state 19

    (22) vardecl -> VAR IDENT EQUALS expr . COLON INT SEMICOLON
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           shift and go to state 35
    ANDAND          shift and go to state 36
    PLUS            shift and go to state 37
    OROR            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    XOR             shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53


state 20

    (32) expr -> NUMBER .

    COLON           reduce using rule 32 (expr -> NUMBER .)
    ANDAND          reduce using rule 32 (expr -> NUMBER .)
    PLUS            reduce using rule 32 (expr -> NUMBER .)
    OROR            reduce using rule 32 (expr -> NUMBER .)
    MINUS           reduce using rule 32 (expr -> NUMBER .)
    TIMES           reduce using rule 32 (expr -> NUMBER .)
    DIVIDE          reduce using rule 32 (expr -> NUMBER .)
    EQUALSEQUALS    reduce using rule 32 (expr -> NUMBER .)
    MOD             reduce using rule 32 (expr -> NUMBER .)
    XOR             reduce using rule 32 (expr -> NUMBER .)
    AND             reduce using rule 32 (expr -> NUMBER .)
    OR              reduce using rule 32 (expr -> NUMBER .)
    LSHIFT          reduce using rule 32 (expr -> NUMBER .)
    RSHIFT          reduce using rule 32 (expr -> NUMBER .)
    LESSTHAN        reduce using rule 32 (expr -> NUMBER .)
    GREATERTHAN     reduce using rule 32 (expr -> NUMBER .)
    LESSTHANEQUALS  reduce using rule 32 (expr -> NUMBER .)
    GREATERTHANEQUALS reduce using rule 32 (expr -> NUMBER .)
    NOTEQUALS       reduce using rule 32 (expr -> NUMBER .)
    RPAREN          reduce using rule 32 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 32 (expr -> NUMBER .)


state 21

    (33) expr -> TRUE .

    COLON           reduce using rule 33 (expr -> TRUE .)
    ANDAND          reduce using rule 33 (expr -> TRUE .)
    PLUS            reduce using rule 33 (expr -> TRUE .)
    OROR            reduce using rule 33 (expr -> TRUE .)
    MINUS           reduce using rule 33 (expr -> TRUE .)
    TIMES           reduce using rule 33 (expr -> TRUE .)
    DIVIDE          reduce using rule 33 (expr -> TRUE .)
    EQUALSEQUALS    reduce using rule 33 (expr -> TRUE .)
    MOD             reduce using rule 33 (expr -> TRUE .)
    XOR             reduce using rule 33 (expr -> TRUE .)
    AND             reduce using rule 33 (expr -> TRUE .)
    OR              reduce using rule 33 (expr -> TRUE .)
    LSHIFT          reduce using rule 33 (expr -> TRUE .)
    RSHIFT          reduce using rule 33 (expr -> TRUE .)
    LESSTHAN        reduce using rule 33 (expr -> TRUE .)
    GREATERTHAN     reduce using rule 33 (expr -> TRUE .)
    LESSTHANEQUALS  reduce using rule 33 (expr -> TRUE .)
    GREATERTHANEQUALS reduce using rule 33 (expr -> TRUE .)
    NOTEQUALS       reduce using rule 33 (expr -> TRUE .)
    RPAREN          reduce using rule 33 (expr -> TRUE .)
    SEMICOLON       reduce using rule 33 (expr -> TRUE .)


state 22

    (34) expr -> FALSE .

    COLON           reduce using rule 34 (expr -> FALSE .)
    ANDAND          reduce using rule 34 (expr -> FALSE .)
    PLUS            reduce using rule 34 (expr -> FALSE .)
    OROR            reduce using rule 34 (expr -> FALSE .)
    MINUS           reduce using rule 34 (expr -> FALSE .)
    TIMES           reduce using rule 34 (expr -> FALSE .)
    DIVIDE          reduce using rule 34 (expr -> FALSE .)
    EQUALSEQUALS    reduce using rule 34 (expr -> FALSE .)
    MOD             reduce using rule 34 (expr -> FALSE .)
    XOR             reduce using rule 34 (expr -> FALSE .)
    AND             reduce using rule 34 (expr -> FALSE .)
    OR              reduce using rule 34 (expr -> FALSE .)
    LSHIFT          reduce using rule 34 (expr -> FALSE .)
    RSHIFT          reduce using rule 34 (expr -> FALSE .)
    LESSTHAN        reduce using rule 34 (expr -> FALSE .)
    GREATERTHAN     reduce using rule 34 (expr -> FALSE .)
    LESSTHANEQUALS  reduce using rule 34 (expr -> FALSE .)
    GREATERTHANEQUALS reduce using rule 34 (expr -> FALSE .)
    NOTEQUALS       reduce using rule 34 (expr -> FALSE .)
    RPAREN          reduce using rule 34 (expr -> FALSE .)
    SEMICOLON       reduce using rule 34 (expr -> FALSE .)


state 23

    (36) expr -> TILDE . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 54

state 24

    (37) expr -> MINUS . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 55

state 25

    (38) expr -> BANG . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 56

state 26

    (39) expr -> LPAREN . expr RPAREN
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 57

state 27

    (15) param -> IDENT COLON . ty
    (6) ty -> . BOOL
    (7) ty -> . INT

    BOOL            shift and go to state 59
    INT             shift and go to state 60

    ty                             shift and go to state 58

state 28

    (13) identlist -> IDENT COMMA . identlist
    (12) identlist -> . IDENT
    (13) identlist -> . IDENT COMMA identlist

    IDENT           shift and go to state 61

    identlist                      shift and go to state 62

state 29

    (8) function -> DEF IDENT LPAREN paramlist RPAREN . block
    (9) function -> DEF IDENT LPAREN paramlist RPAREN . COLON ty block
    (18) block -> . LBRACE stmts RBRACE

    COLON           shift and go to state 64
    LBRACE          shift and go to state 32

    block                          shift and go to state 63

state 30

    (10) function -> DEF IDENT LPAREN RPAREN block .

    DEF             reduce using rule 10 (function -> DEF IDENT LPAREN RPAREN block .)
    VAR             reduce using rule 10 (function -> DEF IDENT LPAREN RPAREN block .)
    $end            reduce using rule 10 (function -> DEF IDENT LPAREN RPAREN block .)


state 31

    (11) function -> DEF IDENT LPAREN RPAREN COLON . ty block
    (6) ty -> . BOOL
    (7) ty -> . INT

    BOOL            shift and go to state 59
    INT             shift and go to state 60

    ty                             shift and go to state 65

state 32

    (18) block -> LBRACE . stmts RBRACE
    (19) stmts -> . stmtstar
    (20) stmtstar -> .
    (21) stmtstar -> . stmtstar stmt

    CONTINUE        reduce using rule 20 (stmtstar -> .)
    BREAK           reduce using rule 20 (stmtstar -> .)
    PRINT           reduce using rule 20 (stmtstar -> .)
    IDENT           reduce using rule 20 (stmtstar -> .)
    IF              reduce using rule 20 (stmtstar -> .)
    WHILE           reduce using rule 20 (stmtstar -> .)
    VAR             reduce using rule 20 (stmtstar -> .)
    LBRACE          reduce using rule 20 (stmtstar -> .)
    RBRACE          reduce using rule 20 (stmtstar -> .)

    stmts                          shift and go to state 66
    stmtstar                       shift and go to state 67

state 33

    (17) paramlist -> param COMMA . paramlist
    (16) paramlist -> . param
    (17) paramlist -> . param COMMA paramlist
    (14) param -> . identlist COLON ty
    (15) param -> . IDENT COLON ty
    (12) identlist -> . IDENT
    (13) identlist -> . IDENT COMMA identlist

    IDENT           shift and go to state 13

    param                          shift and go to state 16
    paramlist                      shift and go to state 68
    identlist                      shift and go to state 17

state 34

    (14) param -> identlist COLON . ty
    (6) ty -> . BOOL
    (7) ty -> . INT

    BOOL            shift and go to state 59
    INT             shift and go to state 60

    ty                             shift and go to state 69

state 35

    (22) vardecl -> VAR IDENT EQUALS expr COLON . INT SEMICOLON

    INT             shift and go to state 70


state 36

    (40) expr -> expr ANDAND . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 71

state 37

    (41) expr -> expr PLUS . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 72

state 38

    (42) expr -> expr OROR . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 73

state 39

    (43) expr -> expr MINUS . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 74

state 40

    (44) expr -> expr TIMES . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 75

state 41

    (45) expr -> expr DIVIDE . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 76

state 42

    (46) expr -> expr EQUALSEQUALS . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 77

state 43

    (47) expr -> expr MOD . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 78

state 44

    (48) expr -> expr XOR . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 79

state 45

    (49) expr -> expr AND . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 80

state 46

    (50) expr -> expr OR . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 81

state 47

    (51) expr -> expr LSHIFT . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 82

state 48

    (52) expr -> expr RSHIFT . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 83

state 49

    (53) expr -> expr LESSTHAN . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 84

state 50

    (54) expr -> expr GREATERTHAN . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 85

state 51

    (55) expr -> expr LESSTHANEQUALS . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 86

state 52

    (56) expr -> expr GREATERTHANEQUALS . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 87

state 53

    (57) expr -> expr NOTEQUALS . expr
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 88

state 54

    (36) expr -> TILDE expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 36 (expr -> TILDE expr .)
    ANDAND          reduce using rule 36 (expr -> TILDE expr .)
    PLUS            reduce using rule 36 (expr -> TILDE expr .)
    OROR            reduce using rule 36 (expr -> TILDE expr .)
    MINUS           reduce using rule 36 (expr -> TILDE expr .)
    TIMES           reduce using rule 36 (expr -> TILDE expr .)
    DIVIDE          reduce using rule 36 (expr -> TILDE expr .)
    EQUALSEQUALS    reduce using rule 36 (expr -> TILDE expr .)
    MOD             reduce using rule 36 (expr -> TILDE expr .)
    XOR             reduce using rule 36 (expr -> TILDE expr .)
    AND             reduce using rule 36 (expr -> TILDE expr .)
    OR              reduce using rule 36 (expr -> TILDE expr .)
    LSHIFT          reduce using rule 36 (expr -> TILDE expr .)
    RSHIFT          reduce using rule 36 (expr -> TILDE expr .)
    LESSTHAN        reduce using rule 36 (expr -> TILDE expr .)
    GREATERTHAN     reduce using rule 36 (expr -> TILDE expr .)
    LESSTHANEQUALS  reduce using rule 36 (expr -> TILDE expr .)
    GREATERTHANEQUALS reduce using rule 36 (expr -> TILDE expr .)
    NOTEQUALS       reduce using rule 36 (expr -> TILDE expr .)
    RPAREN          reduce using rule 36 (expr -> TILDE expr .)
    SEMICOLON       reduce using rule 36 (expr -> TILDE expr .)

  ! ANDAND          [ shift and go to state 36 ]
  ! PLUS            [ shift and go to state 37 ]
  ! OROR            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 55

    (37) expr -> MINUS expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 37 (expr -> MINUS expr .)
    ANDAND          reduce using rule 37 (expr -> MINUS expr .)
    PLUS            reduce using rule 37 (expr -> MINUS expr .)
    OROR            reduce using rule 37 (expr -> MINUS expr .)
    MINUS           reduce using rule 37 (expr -> MINUS expr .)
    TIMES           reduce using rule 37 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 37 (expr -> MINUS expr .)
    EQUALSEQUALS    reduce using rule 37 (expr -> MINUS expr .)
    MOD             reduce using rule 37 (expr -> MINUS expr .)
    XOR             reduce using rule 37 (expr -> MINUS expr .)
    AND             reduce using rule 37 (expr -> MINUS expr .)
    OR              reduce using rule 37 (expr -> MINUS expr .)
    LSHIFT          reduce using rule 37 (expr -> MINUS expr .)
    RSHIFT          reduce using rule 37 (expr -> MINUS expr .)
    LESSTHAN        reduce using rule 37 (expr -> MINUS expr .)
    GREATERTHAN     reduce using rule 37 (expr -> MINUS expr .)
    LESSTHANEQUALS  reduce using rule 37 (expr -> MINUS expr .)
    GREATERTHANEQUALS reduce using rule 37 (expr -> MINUS expr .)
    NOTEQUALS       reduce using rule 37 (expr -> MINUS expr .)
    RPAREN          reduce using rule 37 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 37 (expr -> MINUS expr .)

  ! ANDAND          [ shift and go to state 36 ]
  ! PLUS            [ shift and go to state 37 ]
  ! OROR            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 56

    (38) expr -> BANG expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 38 (expr -> BANG expr .)
    ANDAND          reduce using rule 38 (expr -> BANG expr .)
    PLUS            reduce using rule 38 (expr -> BANG expr .)
    OROR            reduce using rule 38 (expr -> BANG expr .)
    MINUS           reduce using rule 38 (expr -> BANG expr .)
    TIMES           reduce using rule 38 (expr -> BANG expr .)
    DIVIDE          reduce using rule 38 (expr -> BANG expr .)
    EQUALSEQUALS    reduce using rule 38 (expr -> BANG expr .)
    MOD             reduce using rule 38 (expr -> BANG expr .)
    XOR             reduce using rule 38 (expr -> BANG expr .)
    AND             reduce using rule 38 (expr -> BANG expr .)
    OR              reduce using rule 38 (expr -> BANG expr .)
    LSHIFT          reduce using rule 38 (expr -> BANG expr .)
    RSHIFT          reduce using rule 38 (expr -> BANG expr .)
    LESSTHAN        reduce using rule 38 (expr -> BANG expr .)
    GREATERTHAN     reduce using rule 38 (expr -> BANG expr .)
    LESSTHANEQUALS  reduce using rule 38 (expr -> BANG expr .)
    GREATERTHANEQUALS reduce using rule 38 (expr -> BANG expr .)
    NOTEQUALS       reduce using rule 38 (expr -> BANG expr .)
    RPAREN          reduce using rule 38 (expr -> BANG expr .)
    SEMICOLON       reduce using rule 38 (expr -> BANG expr .)

  ! ANDAND          [ shift and go to state 36 ]
  ! PLUS            [ shift and go to state 37 ]
  ! OROR            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 57

    (39) expr -> LPAREN expr . RPAREN
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    RPAREN          shift and go to state 89
    ANDAND          shift and go to state 36
    PLUS            shift and go to state 37
    OROR            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    XOR             shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53


state 58

    (15) param -> IDENT COLON ty .

    COMMA           reduce using rule 15 (param -> IDENT COLON ty .)
    RPAREN          reduce using rule 15 (param -> IDENT COLON ty .)


state 59

    (6) ty -> BOOL .

    COMMA           reduce using rule 6 (ty -> BOOL .)
    RPAREN          reduce using rule 6 (ty -> BOOL .)
    LBRACE          reduce using rule 6 (ty -> BOOL .)


state 60

    (7) ty -> INT .

    COMMA           reduce using rule 7 (ty -> INT .)
    RPAREN          reduce using rule 7 (ty -> INT .)
    LBRACE          reduce using rule 7 (ty -> INT .)


state 61

    (12) identlist -> IDENT .
    (13) identlist -> IDENT . COMMA identlist

    COLON           reduce using rule 12 (identlist -> IDENT .)
    COMMA           shift and go to state 28


state 62

    (13) identlist -> IDENT COMMA identlist .

    COLON           reduce using rule 13 (identlist -> IDENT COMMA identlist .)


state 63

    (8) function -> DEF IDENT LPAREN paramlist RPAREN block .

    DEF             reduce using rule 8 (function -> DEF IDENT LPAREN paramlist RPAREN block .)
    VAR             reduce using rule 8 (function -> DEF IDENT LPAREN paramlist RPAREN block .)
    $end            reduce using rule 8 (function -> DEF IDENT LPAREN paramlist RPAREN block .)


state 64

    (9) function -> DEF IDENT LPAREN paramlist RPAREN COLON . ty block
    (6) ty -> . BOOL
    (7) ty -> . INT

    BOOL            shift and go to state 59
    INT             shift and go to state 60

    ty                             shift and go to state 90

state 65

    (11) function -> DEF IDENT LPAREN RPAREN COLON ty . block
    (18) block -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 91

state 66

    (18) block -> LBRACE stmts . RBRACE

    RBRACE          shift and go to state 92


state 67

    (19) stmts -> stmtstar .
    (21) stmtstar -> stmtstar . stmt
    (23) stmt -> . vardecl
    (24) stmt -> . CONTINUE SEMICOLON
    (25) stmt -> . block
    (26) stmt -> . BREAK SEMICOLON
    (27) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON
    (28) stmt -> . IDENT EQUALS expr SEMICOLON
    (29) stmt -> . IF LPAREN expr RPAREN block
    (30) stmt -> . IF LPAREN expr RPAREN block ELSE block
    (31) stmt -> . WHILE LPAREN expr RPAREN block
    (22) vardecl -> . VAR IDENT EQUALS expr COLON INT SEMICOLON
    (18) block -> . LBRACE stmts RBRACE

    RBRACE          reduce using rule 19 (stmts -> stmtstar .)
    CONTINUE        shift and go to state 95
    BREAK           shift and go to state 97
    PRINT           shift and go to state 98
    IDENT           shift and go to state 99
    IF              shift and go to state 100
    WHILE           shift and go to state 101
    VAR             shift and go to state 7
    LBRACE          shift and go to state 32

    stmt                           shift and go to state 93
    vardecl                        shift and go to state 94
    block                          shift and go to state 96

state 68

    (17) paramlist -> param COMMA paramlist .

    RPAREN          reduce using rule 17 (paramlist -> param COMMA paramlist .)


state 69

    (14) param -> identlist COLON ty .

    COMMA           reduce using rule 14 (param -> identlist COLON ty .)
    RPAREN          reduce using rule 14 (param -> identlist COLON ty .)


state 70

    (22) vardecl -> VAR IDENT EQUALS expr COLON INT . SEMICOLON

    SEMICOLON       shift and go to state 102


state 71

    (40) expr -> expr ANDAND expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 40 (expr -> expr ANDAND expr .)
    ANDAND          reduce using rule 40 (expr -> expr ANDAND expr .)
    OROR            reduce using rule 40 (expr -> expr ANDAND expr .)
    RPAREN          reduce using rule 40 (expr -> expr ANDAND expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr ANDAND expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    XOR             shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53

  ! PLUS            [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! EQUALSEQUALS    [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! XOR             [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! AND             [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! OR              [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! LSHIFT          [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! RSHIFT          [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! LESSTHAN        [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! GREATERTHAN     [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! LESSTHANEQUALS  [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! GREATERTHANEQUALS [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! NOTEQUALS       [ reduce using rule 40 (expr -> expr ANDAND expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]


state 72

    (41) expr -> expr PLUS expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 41 (expr -> expr PLUS expr .)
    ANDAND          reduce using rule 41 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 41 (expr -> expr PLUS expr .)
    OROR            reduce using rule 41 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 41 (expr -> expr PLUS expr .)
    EQUALSEQUALS    reduce using rule 41 (expr -> expr PLUS expr .)
    XOR             reduce using rule 41 (expr -> expr PLUS expr .)
    AND             reduce using rule 41 (expr -> expr PLUS expr .)
    OR              reduce using rule 41 (expr -> expr PLUS expr .)
    LSHIFT          reduce using rule 41 (expr -> expr PLUS expr .)
    RSHIFT          reduce using rule 41 (expr -> expr PLUS expr .)
    LESSTHAN        reduce using rule 41 (expr -> expr PLUS expr .)
    GREATERTHAN     reduce using rule 41 (expr -> expr PLUS expr .)
    LESSTHANEQUALS  reduce using rule 41 (expr -> expr PLUS expr .)
    GREATERTHANEQUALS reduce using rule 41 (expr -> expr PLUS expr .)
    NOTEQUALS       reduce using rule 41 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 41 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43

  ! TIMES           [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! PLUS            [ shift and go to state 37 ]
  ! OROR            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 73

    (42) expr -> expr OROR expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 42 (expr -> expr OROR expr .)
    OROR            reduce using rule 42 (expr -> expr OROR expr .)
    RPAREN          reduce using rule 42 (expr -> expr OROR expr .)
    SEMICOLON       reduce using rule 42 (expr -> expr OROR expr .)
    ANDAND          shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    XOR             shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53

  ! ANDAND          [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! PLUS            [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! DIVIDE          [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! EQUALSEQUALS    [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! MOD             [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! XOR             [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! AND             [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! OR              [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! LSHIFT          [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! RSHIFT          [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! LESSTHAN        [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! GREATERTHAN     [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! LESSTHANEQUALS  [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! GREATERTHANEQUALS [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! NOTEQUALS       [ reduce using rule 42 (expr -> expr OROR expr .) ]
  ! OROR            [ shift and go to state 38 ]


state 74

    (43) expr -> expr MINUS expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 43 (expr -> expr MINUS expr .)
    ANDAND          reduce using rule 43 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 43 (expr -> expr MINUS expr .)
    OROR            reduce using rule 43 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 43 (expr -> expr MINUS expr .)
    EQUALSEQUALS    reduce using rule 43 (expr -> expr MINUS expr .)
    XOR             reduce using rule 43 (expr -> expr MINUS expr .)
    AND             reduce using rule 43 (expr -> expr MINUS expr .)
    OR              reduce using rule 43 (expr -> expr MINUS expr .)
    LSHIFT          reduce using rule 43 (expr -> expr MINUS expr .)
    RSHIFT          reduce using rule 43 (expr -> expr MINUS expr .)
    LESSTHAN        reduce using rule 43 (expr -> expr MINUS expr .)
    GREATERTHAN     reduce using rule 43 (expr -> expr MINUS expr .)
    LESSTHANEQUALS  reduce using rule 43 (expr -> expr MINUS expr .)
    GREATERTHANEQUALS reduce using rule 43 (expr -> expr MINUS expr .)
    NOTEQUALS       reduce using rule 43 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 43 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 43 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43

  ! TIMES           [ reduce using rule 43 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 43 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 43 (expr -> expr MINUS expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! PLUS            [ shift and go to state 37 ]
  ! OROR            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 75

    (44) expr -> expr TIMES expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 44 (expr -> expr TIMES expr .)
    ANDAND          reduce using rule 44 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 44 (expr -> expr TIMES expr .)
    OROR            reduce using rule 44 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 44 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 44 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 44 (expr -> expr TIMES expr .)
    EQUALSEQUALS    reduce using rule 44 (expr -> expr TIMES expr .)
    MOD             reduce using rule 44 (expr -> expr TIMES expr .)
    XOR             reduce using rule 44 (expr -> expr TIMES expr .)
    AND             reduce using rule 44 (expr -> expr TIMES expr .)
    OR              reduce using rule 44 (expr -> expr TIMES expr .)
    LSHIFT          reduce using rule 44 (expr -> expr TIMES expr .)
    RSHIFT          reduce using rule 44 (expr -> expr TIMES expr .)
    LESSTHAN        reduce using rule 44 (expr -> expr TIMES expr .)
    GREATERTHAN     reduce using rule 44 (expr -> expr TIMES expr .)
    LESSTHANEQUALS  reduce using rule 44 (expr -> expr TIMES expr .)
    GREATERTHANEQUALS reduce using rule 44 (expr -> expr TIMES expr .)
    NOTEQUALS       reduce using rule 44 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 44 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 44 (expr -> expr TIMES expr .)

  ! ANDAND          [ shift and go to state 36 ]
  ! PLUS            [ shift and go to state 37 ]
  ! OROR            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 76

    (45) expr -> expr DIVIDE expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 45 (expr -> expr DIVIDE expr .)
    ANDAND          reduce using rule 45 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 45 (expr -> expr DIVIDE expr .)
    OROR            reduce using rule 45 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 45 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 45 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 45 (expr -> expr DIVIDE expr .)
    EQUALSEQUALS    reduce using rule 45 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 45 (expr -> expr DIVIDE expr .)
    XOR             reduce using rule 45 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 45 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 45 (expr -> expr DIVIDE expr .)
    LSHIFT          reduce using rule 45 (expr -> expr DIVIDE expr .)
    RSHIFT          reduce using rule 45 (expr -> expr DIVIDE expr .)
    LESSTHAN        reduce using rule 45 (expr -> expr DIVIDE expr .)
    GREATERTHAN     reduce using rule 45 (expr -> expr DIVIDE expr .)
    LESSTHANEQUALS  reduce using rule 45 (expr -> expr DIVIDE expr .)
    GREATERTHANEQUALS reduce using rule 45 (expr -> expr DIVIDE expr .)
    NOTEQUALS       reduce using rule 45 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 45 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 45 (expr -> expr DIVIDE expr .)

  ! ANDAND          [ shift and go to state 36 ]
  ! PLUS            [ shift and go to state 37 ]
  ! OROR            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 77

    (46) expr -> expr EQUALSEQUALS expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    ANDAND          reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    OROR            reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    EQUALSEQUALS    reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    XOR             reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    AND             reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    OR              reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    NOTEQUALS       reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    RPAREN          reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    SEMICOLON       reduce using rule 46 (expr -> expr EQUALSEQUALS expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52

  ! PLUS            [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! MINUS           [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! TIMES           [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! MOD             [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! LSHIFT          [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! RSHIFT          [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! LESSTHAN        [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! GREATERTHAN     [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! LESSTHANEQUALS  [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! GREATERTHANEQUALS [ reduce using rule 46 (expr -> expr EQUALSEQUALS expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 78

    (47) expr -> expr MOD expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 47 (expr -> expr MOD expr .)
    ANDAND          reduce using rule 47 (expr -> expr MOD expr .)
    PLUS            reduce using rule 47 (expr -> expr MOD expr .)
    OROR            reduce using rule 47 (expr -> expr MOD expr .)
    MINUS           reduce using rule 47 (expr -> expr MOD expr .)
    TIMES           reduce using rule 47 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 47 (expr -> expr MOD expr .)
    EQUALSEQUALS    reduce using rule 47 (expr -> expr MOD expr .)
    MOD             reduce using rule 47 (expr -> expr MOD expr .)
    XOR             reduce using rule 47 (expr -> expr MOD expr .)
    AND             reduce using rule 47 (expr -> expr MOD expr .)
    OR              reduce using rule 47 (expr -> expr MOD expr .)
    LSHIFT          reduce using rule 47 (expr -> expr MOD expr .)
    RSHIFT          reduce using rule 47 (expr -> expr MOD expr .)
    LESSTHAN        reduce using rule 47 (expr -> expr MOD expr .)
    GREATERTHAN     reduce using rule 47 (expr -> expr MOD expr .)
    LESSTHANEQUALS  reduce using rule 47 (expr -> expr MOD expr .)
    GREATERTHANEQUALS reduce using rule 47 (expr -> expr MOD expr .)
    NOTEQUALS       reduce using rule 47 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 47 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 47 (expr -> expr MOD expr .)

  ! ANDAND          [ shift and go to state 36 ]
  ! PLUS            [ shift and go to state 37 ]
  ! OROR            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 79

    (48) expr -> expr XOR expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 48 (expr -> expr XOR expr .)
    ANDAND          reduce using rule 48 (expr -> expr XOR expr .)
    OROR            reduce using rule 48 (expr -> expr XOR expr .)
    XOR             reduce using rule 48 (expr -> expr XOR expr .)
    OR              reduce using rule 48 (expr -> expr XOR expr .)
    RPAREN          reduce using rule 48 (expr -> expr XOR expr .)
    SEMICOLON       reduce using rule 48 (expr -> expr XOR expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 45
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53

  ! PLUS            [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! MINUS           [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! TIMES           [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! DIVIDE          [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! EQUALSEQUALS    [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! MOD             [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! AND             [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! LSHIFT          [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! RSHIFT          [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! LESSTHAN        [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! GREATERTHAN     [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! LESSTHANEQUALS  [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! GREATERTHANEQUALS [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! NOTEQUALS       [ reduce using rule 48 (expr -> expr XOR expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! XOR             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 46 ]


state 80

    (49) expr -> expr AND expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 49 (expr -> expr AND expr .)
    ANDAND          reduce using rule 49 (expr -> expr AND expr .)
    OROR            reduce using rule 49 (expr -> expr AND expr .)
    XOR             reduce using rule 49 (expr -> expr AND expr .)
    AND             reduce using rule 49 (expr -> expr AND expr .)
    OR              reduce using rule 49 (expr -> expr AND expr .)
    RPAREN          reduce using rule 49 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 49 (expr -> expr AND expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53

  ! PLUS            [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! EQUALSEQUALS    [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! LSHIFT          [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! RSHIFT          [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! LESSTHAN        [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! GREATERTHAN     [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! LESSTHANEQUALS  [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! GREATERTHANEQUALS [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! NOTEQUALS       [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 81

    (50) expr -> expr OR expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 50 (expr -> expr OR expr .)
    ANDAND          reduce using rule 50 (expr -> expr OR expr .)
    OROR            reduce using rule 50 (expr -> expr OR expr .)
    OR              reduce using rule 50 (expr -> expr OR expr .)
    RPAREN          reduce using rule 50 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 50 (expr -> expr OR expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    XOR             shift and go to state 44
    AND             shift and go to state 45
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53

  ! PLUS            [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! EQUALSEQUALS    [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! XOR             [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! LSHIFT          [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! RSHIFT          [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! LESSTHAN        [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! GREATERTHAN     [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! LESSTHANEQUALS  [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! GREATERTHANEQUALS [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! NOTEQUALS       [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! OR              [ shift and go to state 46 ]


state 82

    (51) expr -> expr LSHIFT expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 51 (expr -> expr LSHIFT expr .)
    ANDAND          reduce using rule 51 (expr -> expr LSHIFT expr .)
    OROR            reduce using rule 51 (expr -> expr LSHIFT expr .)
    EQUALSEQUALS    reduce using rule 51 (expr -> expr LSHIFT expr .)
    XOR             reduce using rule 51 (expr -> expr LSHIFT expr .)
    AND             reduce using rule 51 (expr -> expr LSHIFT expr .)
    OR              reduce using rule 51 (expr -> expr LSHIFT expr .)
    LSHIFT          reduce using rule 51 (expr -> expr LSHIFT expr .)
    RSHIFT          reduce using rule 51 (expr -> expr LSHIFT expr .)
    LESSTHAN        reduce using rule 51 (expr -> expr LSHIFT expr .)
    GREATERTHAN     reduce using rule 51 (expr -> expr LSHIFT expr .)
    LESSTHANEQUALS  reduce using rule 51 (expr -> expr LSHIFT expr .)
    GREATERTHANEQUALS reduce using rule 51 (expr -> expr LSHIFT expr .)
    NOTEQUALS       reduce using rule 51 (expr -> expr LSHIFT expr .)
    RPAREN          reduce using rule 51 (expr -> expr LSHIFT expr .)
    SEMICOLON       reduce using rule 51 (expr -> expr LSHIFT expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43

  ! PLUS            [ reduce using rule 51 (expr -> expr LSHIFT expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr LSHIFT expr .) ]
  ! TIMES           [ reduce using rule 51 (expr -> expr LSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr LSHIFT expr .) ]
  ! MOD             [ reduce using rule 51 (expr -> expr LSHIFT expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 83

    (52) expr -> expr RSHIFT expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 52 (expr -> expr RSHIFT expr .)
    ANDAND          reduce using rule 52 (expr -> expr RSHIFT expr .)
    OROR            reduce using rule 52 (expr -> expr RSHIFT expr .)
    EQUALSEQUALS    reduce using rule 52 (expr -> expr RSHIFT expr .)
    XOR             reduce using rule 52 (expr -> expr RSHIFT expr .)
    AND             reduce using rule 52 (expr -> expr RSHIFT expr .)
    OR              reduce using rule 52 (expr -> expr RSHIFT expr .)
    LSHIFT          reduce using rule 52 (expr -> expr RSHIFT expr .)
    RSHIFT          reduce using rule 52 (expr -> expr RSHIFT expr .)
    LESSTHAN        reduce using rule 52 (expr -> expr RSHIFT expr .)
    GREATERTHAN     reduce using rule 52 (expr -> expr RSHIFT expr .)
    LESSTHANEQUALS  reduce using rule 52 (expr -> expr RSHIFT expr .)
    GREATERTHANEQUALS reduce using rule 52 (expr -> expr RSHIFT expr .)
    NOTEQUALS       reduce using rule 52 (expr -> expr RSHIFT expr .)
    RPAREN          reduce using rule 52 (expr -> expr RSHIFT expr .)
    SEMICOLON       reduce using rule 52 (expr -> expr RSHIFT expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43

  ! PLUS            [ reduce using rule 52 (expr -> expr RSHIFT expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr RSHIFT expr .) ]
  ! TIMES           [ reduce using rule 52 (expr -> expr RSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr RSHIFT expr .) ]
  ! MOD             [ reduce using rule 52 (expr -> expr RSHIFT expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LSHIFT          [ shift and go to state 47 ]
  ! RSHIFT          [ shift and go to state 48 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 84

    (53) expr -> expr LESSTHAN expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 53 (expr -> expr LESSTHAN expr .)
    ANDAND          reduce using rule 53 (expr -> expr LESSTHAN expr .)
    OROR            reduce using rule 53 (expr -> expr LESSTHAN expr .)
    EQUALSEQUALS    reduce using rule 53 (expr -> expr LESSTHAN expr .)
    XOR             reduce using rule 53 (expr -> expr LESSTHAN expr .)
    AND             reduce using rule 53 (expr -> expr LESSTHAN expr .)
    OR              reduce using rule 53 (expr -> expr LESSTHAN expr .)
    LESSTHAN        reduce using rule 53 (expr -> expr LESSTHAN expr .)
    GREATERTHAN     reduce using rule 53 (expr -> expr LESSTHAN expr .)
    LESSTHANEQUALS  reduce using rule 53 (expr -> expr LESSTHAN expr .)
    GREATERTHANEQUALS reduce using rule 53 (expr -> expr LESSTHAN expr .)
    NOTEQUALS       reduce using rule 53 (expr -> expr LESSTHAN expr .)
    RPAREN          reduce using rule 53 (expr -> expr LESSTHAN expr .)
    SEMICOLON       reduce using rule 53 (expr -> expr LESSTHAN expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48

  ! PLUS            [ reduce using rule 53 (expr -> expr LESSTHAN expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr LESSTHAN expr .) ]
  ! TIMES           [ reduce using rule 53 (expr -> expr LESSTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr LESSTHAN expr .) ]
  ! MOD             [ reduce using rule 53 (expr -> expr LESSTHAN expr .) ]
  ! LSHIFT          [ reduce using rule 53 (expr -> expr LESSTHAN expr .) ]
  ! RSHIFT          [ reduce using rule 53 (expr -> expr LESSTHAN expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 85

    (54) expr -> expr GREATERTHAN expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    ANDAND          reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    OROR            reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    EQUALSEQUALS    reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    XOR             reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    AND             reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    OR              reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    LESSTHAN        reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    GREATERTHAN     reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    LESSTHANEQUALS  reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    GREATERTHANEQUALS reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    NOTEQUALS       reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    RPAREN          reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    SEMICOLON       reduce using rule 54 (expr -> expr GREATERTHAN expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48

  ! PLUS            [ reduce using rule 54 (expr -> expr GREATERTHAN expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr GREATERTHAN expr .) ]
  ! TIMES           [ reduce using rule 54 (expr -> expr GREATERTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr GREATERTHAN expr .) ]
  ! MOD             [ reduce using rule 54 (expr -> expr GREATERTHAN expr .) ]
  ! LSHIFT          [ reduce using rule 54 (expr -> expr GREATERTHAN expr .) ]
  ! RSHIFT          [ reduce using rule 54 (expr -> expr GREATERTHAN expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 86

    (55) expr -> expr LESSTHANEQUALS expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    ANDAND          reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    OROR            reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    EQUALSEQUALS    reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    XOR             reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    AND             reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    OR              reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    LESSTHAN        reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    GREATERTHAN     reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    LESSTHANEQUALS  reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    GREATERTHANEQUALS reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    NOTEQUALS       reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    RPAREN          reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    SEMICOLON       reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48

  ! PLUS            [ reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .) ]
  ! TIMES           [ reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .) ]
  ! MOD             [ reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .) ]
  ! LSHIFT          [ reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .) ]
  ! RSHIFT          [ reduce using rule 55 (expr -> expr LESSTHANEQUALS expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 87

    (56) expr -> expr GREATERTHANEQUALS expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    ANDAND          reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    OROR            reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    EQUALSEQUALS    reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    XOR             reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    AND             reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    OR              reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    LESSTHAN        reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    GREATERTHAN     reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    LESSTHANEQUALS  reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    GREATERTHANEQUALS reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    NOTEQUALS       reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    RPAREN          reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    SEMICOLON       reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48

  ! PLUS            [ reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .) ]
  ! TIMES           [ reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .) ]
  ! MOD             [ reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .) ]
  ! LSHIFT          [ reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .) ]
  ! RSHIFT          [ reduce using rule 56 (expr -> expr GREATERTHANEQUALS expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! LESSTHAN        [ shift and go to state 49 ]
  ! GREATERTHAN     [ shift and go to state 50 ]
  ! LESSTHANEQUALS  [ shift and go to state 51 ]
  ! GREATERTHANEQUALS [ shift and go to state 52 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 88

    (57) expr -> expr NOTEQUALS expr .
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    COLON           reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    ANDAND          reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    OROR            reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    EQUALSEQUALS    reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    XOR             reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    AND             reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    OR              reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    NOTEQUALS       reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    RPAREN          reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    SEMICOLON       reduce using rule 57 (expr -> expr NOTEQUALS expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 43
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52

  ! PLUS            [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! MOD             [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! LSHIFT          [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! RSHIFT          [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! LESSTHAN        [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! GREATERTHAN     [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! LESSTHANEQUALS  [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! GREATERTHANEQUALS [ reduce using rule 57 (expr -> expr NOTEQUALS expr .) ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 38 ]
  ! EQUALSEQUALS    [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! NOTEQUALS       [ shift and go to state 53 ]


state 89

    (39) expr -> LPAREN expr RPAREN .

    COLON           reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    OROR            reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    EQUALSEQUALS    reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    XOR             reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    LSHIFT          reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    RSHIFT          reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    LESSTHAN        reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    GREATERTHAN     reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    LESSTHANEQUALS  reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    GREATERTHANEQUALS reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    NOTEQUALS       reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 39 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 39 (expr -> LPAREN expr RPAREN .)


state 90

    (9) function -> DEF IDENT LPAREN paramlist RPAREN COLON ty . block
    (18) block -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 103

state 91

    (11) function -> DEF IDENT LPAREN RPAREN COLON ty block .

    DEF             reduce using rule 11 (function -> DEF IDENT LPAREN RPAREN COLON ty block .)
    VAR             reduce using rule 11 (function -> DEF IDENT LPAREN RPAREN COLON ty block .)
    $end            reduce using rule 11 (function -> DEF IDENT LPAREN RPAREN COLON ty block .)


state 92

    (18) block -> LBRACE stmts RBRACE .

    DEF             reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    VAR             reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    $end            reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    CONTINUE        reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    BREAK           reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    PRINT           reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    IDENT           reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    IF              reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    WHILE           reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    LBRACE          reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    RBRACE          reduce using rule 18 (block -> LBRACE stmts RBRACE .)
    ELSE            reduce using rule 18 (block -> LBRACE stmts RBRACE .)


state 93

    (21) stmtstar -> stmtstar stmt .

    CONTINUE        reduce using rule 21 (stmtstar -> stmtstar stmt .)
    BREAK           reduce using rule 21 (stmtstar -> stmtstar stmt .)
    PRINT           reduce using rule 21 (stmtstar -> stmtstar stmt .)
    IDENT           reduce using rule 21 (stmtstar -> stmtstar stmt .)
    IF              reduce using rule 21 (stmtstar -> stmtstar stmt .)
    WHILE           reduce using rule 21 (stmtstar -> stmtstar stmt .)
    VAR             reduce using rule 21 (stmtstar -> stmtstar stmt .)
    LBRACE          reduce using rule 21 (stmtstar -> stmtstar stmt .)
    RBRACE          reduce using rule 21 (stmtstar -> stmtstar stmt .)


state 94

    (23) stmt -> vardecl .

    CONTINUE        reduce using rule 23 (stmt -> vardecl .)
    BREAK           reduce using rule 23 (stmt -> vardecl .)
    PRINT           reduce using rule 23 (stmt -> vardecl .)
    IDENT           reduce using rule 23 (stmt -> vardecl .)
    IF              reduce using rule 23 (stmt -> vardecl .)
    WHILE           reduce using rule 23 (stmt -> vardecl .)
    VAR             reduce using rule 23 (stmt -> vardecl .)
    LBRACE          reduce using rule 23 (stmt -> vardecl .)
    RBRACE          reduce using rule 23 (stmt -> vardecl .)


state 95

    (24) stmt -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 104


state 96

    (25) stmt -> block .

    CONTINUE        reduce using rule 25 (stmt -> block .)
    BREAK           reduce using rule 25 (stmt -> block .)
    PRINT           reduce using rule 25 (stmt -> block .)
    IDENT           reduce using rule 25 (stmt -> block .)
    IF              reduce using rule 25 (stmt -> block .)
    WHILE           reduce using rule 25 (stmt -> block .)
    VAR             reduce using rule 25 (stmt -> block .)
    LBRACE          reduce using rule 25 (stmt -> block .)
    RBRACE          reduce using rule 25 (stmt -> block .)


state 97

    (26) stmt -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 105


state 98

    (27) stmt -> PRINT . LPAREN expr RPAREN SEMICOLON

    LPAREN          shift and go to state 106


state 99

    (28) stmt -> IDENT . EQUALS expr SEMICOLON

    EQUALS          shift and go to state 107


state 100

    (29) stmt -> IF . LPAREN expr RPAREN block
    (30) stmt -> IF . LPAREN expr RPAREN block ELSE block

    LPAREN          shift and go to state 108


state 101

    (31) stmt -> WHILE . LPAREN expr RPAREN block

    LPAREN          shift and go to state 109


state 102

    (22) vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .

    DEF             reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    VAR             reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    $end            reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    CONTINUE        reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    BREAK           reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    PRINT           reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    IDENT           reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    IF              reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    WHILE           reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    LBRACE          reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    RBRACE          reduce using rule 22 (vardecl -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)


state 103

    (9) function -> DEF IDENT LPAREN paramlist RPAREN COLON ty block .

    DEF             reduce using rule 9 (function -> DEF IDENT LPAREN paramlist RPAREN COLON ty block .)
    VAR             reduce using rule 9 (function -> DEF IDENT LPAREN paramlist RPAREN COLON ty block .)
    $end            reduce using rule 9 (function -> DEF IDENT LPAREN paramlist RPAREN COLON ty block .)


state 104

    (24) stmt -> CONTINUE SEMICOLON .

    CONTINUE        reduce using rule 24 (stmt -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 24 (stmt -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 24 (stmt -> CONTINUE SEMICOLON .)
    IDENT           reduce using rule 24 (stmt -> CONTINUE SEMICOLON .)
    IF              reduce using rule 24 (stmt -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 24 (stmt -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 24 (stmt -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 24 (stmt -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 24 (stmt -> CONTINUE SEMICOLON .)


state 105

    (26) stmt -> BREAK SEMICOLON .

    CONTINUE        reduce using rule 26 (stmt -> BREAK SEMICOLON .)
    BREAK           reduce using rule 26 (stmt -> BREAK SEMICOLON .)
    PRINT           reduce using rule 26 (stmt -> BREAK SEMICOLON .)
    IDENT           reduce using rule 26 (stmt -> BREAK SEMICOLON .)
    IF              reduce using rule 26 (stmt -> BREAK SEMICOLON .)
    WHILE           reduce using rule 26 (stmt -> BREAK SEMICOLON .)
    VAR             reduce using rule 26 (stmt -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 26 (stmt -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 26 (stmt -> BREAK SEMICOLON .)


state 106

    (27) stmt -> PRINT LPAREN . expr RPAREN SEMICOLON
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 110

state 107

    (28) stmt -> IDENT EQUALS . expr SEMICOLON
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 111

state 108

    (29) stmt -> IF LPAREN . expr RPAREN block
    (30) stmt -> IF LPAREN . expr RPAREN block ELSE block
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 112

state 109

    (31) stmt -> WHILE LPAREN . expr RPAREN block
    (32) expr -> . NUMBER
    (33) expr -> . TRUE
    (34) expr -> . FALSE
    (35) expr -> . IDENT
    (36) expr -> . TILDE expr
    (37) expr -> . MINUS expr
    (38) expr -> . BANG expr
    (39) expr -> . LPAREN expr RPAREN
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr OROR expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr EQUALSEQUALS expr
    (47) expr -> . expr MOD expr
    (48) expr -> . expr XOR expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr LSHIFT expr
    (52) expr -> . expr RSHIFT expr
    (53) expr -> . expr LESSTHAN expr
    (54) expr -> . expr GREATERTHAN expr
    (55) expr -> . expr LESSTHANEQUALS expr
    (56) expr -> . expr GREATERTHANEQUALS expr
    (57) expr -> . expr NOTEQUALS expr

    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    IDENT           shift and go to state 18
    TILDE           shift and go to state 23
    MINUS           shift and go to state 24
    BANG            shift and go to state 25
    LPAREN          shift and go to state 26

    expr                           shift and go to state 113

state 110

    (27) stmt -> PRINT LPAREN expr . RPAREN SEMICOLON
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    RPAREN          shift and go to state 114
    ANDAND          shift and go to state 36
    PLUS            shift and go to state 37
    OROR            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    XOR             shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53


state 111

    (28) stmt -> IDENT EQUALS expr . SEMICOLON
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    SEMICOLON       shift and go to state 115
    ANDAND          shift and go to state 36
    PLUS            shift and go to state 37
    OROR            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    XOR             shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53


state 112

    (29) stmt -> IF LPAREN expr . RPAREN block
    (30) stmt -> IF LPAREN expr . RPAREN block ELSE block
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    RPAREN          shift and go to state 116
    ANDAND          shift and go to state 36
    PLUS            shift and go to state 37
    OROR            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    XOR             shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53


state 113

    (31) stmt -> WHILE LPAREN expr . RPAREN block
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . OROR expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . EQUALSEQUALS expr
    (47) expr -> expr . MOD expr
    (48) expr -> expr . XOR expr
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . LSHIFT expr
    (52) expr -> expr . RSHIFT expr
    (53) expr -> expr . LESSTHAN expr
    (54) expr -> expr . GREATERTHAN expr
    (55) expr -> expr . LESSTHANEQUALS expr
    (56) expr -> expr . GREATERTHANEQUALS expr
    (57) expr -> expr . NOTEQUALS expr

    RPAREN          shift and go to state 117
    ANDAND          shift and go to state 36
    PLUS            shift and go to state 37
    OROR            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    EQUALSEQUALS    shift and go to state 42
    MOD             shift and go to state 43
    XOR             shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46
    LSHIFT          shift and go to state 47
    RSHIFT          shift and go to state 48
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    LESSTHANEQUALS  shift and go to state 51
    GREATERTHANEQUALS shift and go to state 52
    NOTEQUALS       shift and go to state 53


state 114

    (27) stmt -> PRINT LPAREN expr RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 118


state 115

    (28) stmt -> IDENT EQUALS expr SEMICOLON .

    CONTINUE        reduce using rule 28 (stmt -> IDENT EQUALS expr SEMICOLON .)
    BREAK           reduce using rule 28 (stmt -> IDENT EQUALS expr SEMICOLON .)
    PRINT           reduce using rule 28 (stmt -> IDENT EQUALS expr SEMICOLON .)
    IDENT           reduce using rule 28 (stmt -> IDENT EQUALS expr SEMICOLON .)
    IF              reduce using rule 28 (stmt -> IDENT EQUALS expr SEMICOLON .)
    WHILE           reduce using rule 28 (stmt -> IDENT EQUALS expr SEMICOLON .)
    VAR             reduce using rule 28 (stmt -> IDENT EQUALS expr SEMICOLON .)
    LBRACE          reduce using rule 28 (stmt -> IDENT EQUALS expr SEMICOLON .)
    RBRACE          reduce using rule 28 (stmt -> IDENT EQUALS expr SEMICOLON .)


state 116

    (29) stmt -> IF LPAREN expr RPAREN . block
    (30) stmt -> IF LPAREN expr RPAREN . block ELSE block
    (18) block -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 119

state 117

    (31) stmt -> WHILE LPAREN expr RPAREN . block
    (18) block -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 120

state 118

    (27) stmt -> PRINT LPAREN expr RPAREN SEMICOLON .

    CONTINUE        reduce using rule 27 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    BREAK           reduce using rule 27 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    PRINT           reduce using rule 27 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    IDENT           reduce using rule 27 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    IF              reduce using rule 27 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    WHILE           reduce using rule 27 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    VAR             reduce using rule 27 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    LBRACE          reduce using rule 27 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    RBRACE          reduce using rule 27 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)


state 119

    (29) stmt -> IF LPAREN expr RPAREN block .
    (30) stmt -> IF LPAREN expr RPAREN block . ELSE block

    CONTINUE        reduce using rule 29 (stmt -> IF LPAREN expr RPAREN block .)
    BREAK           reduce using rule 29 (stmt -> IF LPAREN expr RPAREN block .)
    PRINT           reduce using rule 29 (stmt -> IF LPAREN expr RPAREN block .)
    IDENT           reduce using rule 29 (stmt -> IF LPAREN expr RPAREN block .)
    IF              reduce using rule 29 (stmt -> IF LPAREN expr RPAREN block .)
    WHILE           reduce using rule 29 (stmt -> IF LPAREN expr RPAREN block .)
    VAR             reduce using rule 29 (stmt -> IF LPAREN expr RPAREN block .)
    LBRACE          reduce using rule 29 (stmt -> IF LPAREN expr RPAREN block .)
    RBRACE          reduce using rule 29 (stmt -> IF LPAREN expr RPAREN block .)
    ELSE            shift and go to state 121


state 120

    (31) stmt -> WHILE LPAREN expr RPAREN block .

    CONTINUE        reduce using rule 31 (stmt -> WHILE LPAREN expr RPAREN block .)
    BREAK           reduce using rule 31 (stmt -> WHILE LPAREN expr RPAREN block .)
    PRINT           reduce using rule 31 (stmt -> WHILE LPAREN expr RPAREN block .)
    IDENT           reduce using rule 31 (stmt -> WHILE LPAREN expr RPAREN block .)
    IF              reduce using rule 31 (stmt -> WHILE LPAREN expr RPAREN block .)
    WHILE           reduce using rule 31 (stmt -> WHILE LPAREN expr RPAREN block .)
    VAR             reduce using rule 31 (stmt -> WHILE LPAREN expr RPAREN block .)
    LBRACE          reduce using rule 31 (stmt -> WHILE LPAREN expr RPAREN block .)
    RBRACE          reduce using rule 31 (stmt -> WHILE LPAREN expr RPAREN block .)


state 121

    (30) stmt -> IF LPAREN expr RPAREN block ELSE . block
    (18) block -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 32

    block                          shift and go to state 122

state 122

    (30) stmt -> IF LPAREN expr RPAREN block ELSE block .

    CONTINUE        reduce using rule 30 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    BREAK           reduce using rule 30 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    PRINT           reduce using rule 30 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    IDENT           reduce using rule 30 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    IF              reduce using rule 30 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    WHILE           reduce using rule 30 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    VAR             reduce using rule 30 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    LBRACE          reduce using rule 30 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    RBRACE          reduce using rule 30 (stmt -> IF LPAREN expr RPAREN block ELSE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 13 resolved as shift
