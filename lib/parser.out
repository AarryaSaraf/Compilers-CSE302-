Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    MAIN

Grammar

Rule 0     S' -> program
Rule 1     program -> DEF IDENT LPAREN RPAREN block
Rule 2     block -> LBRACE stmts RBRACE
Rule 3     stmts -> stmtstar
Rule 4     stmtstar -> <empty>
Rule 5     stmtstar -> stmtstar stmt
Rule 6     stmt -> VAR IDENT EQUALS expr COLON INT SEMICOLON
Rule 7     stmt -> PRINT LPAREN expr RPAREN SEMICOLON
Rule 8     stmt -> IDENT EQUALS expr SEMICOLON
Rule 9     stmt -> IF LPAREN expr RPAREN block
Rule 10    stmt -> IF LPAREN expr RPAREN block ELSE block
Rule 11    stmt -> WHILE LPAREN expr RPAREN block
Rule 12    expr -> NUMBER
Rule 13    expr -> IDENT
Rule 14    expr -> expr binop expr
Rule 15    expr -> TILDE expr
Rule 16    expr -> MINUS expr
Rule 17    expr -> LPAREN expr RPAREN
Rule 18    unop -> MINUS
Rule 19    unop -> BANG
Rule 20    unop -> TILDE
Rule 21    binop -> PLUS
Rule 22    binop -> ANDAND
Rule 23    binop -> OROR
Rule 24    binop -> MINUS
Rule 25    binop -> TIMES
Rule 26    binop -> DIVIDE
Rule 27    binop -> MOD
Rule 28    binop -> XOR
Rule 29    binop -> AND
Rule 30    binop -> OR
Rule 31    binop -> LSHIFT
Rule 32    binop -> RSHIFT
Rule 33    binop -> LESSTHAN
Rule 34    binop -> GREATERTHAN
Rule 35    binop -> LESSTHANEQUALS
Rule 36    binop -> GREATERTHANEQUALS
Rule 37    binop -> EQUALSEQUALS
Rule 38    binop -> NOTEQUALS

Terminals, with rules where they appear

AND                  : 29
ANDAND               : 22
BANG                 : 19
COLON                : 6
COMMENT              : 
DEF                  : 1
DIVIDE               : 26
ELSE                 : 10
EQUALS               : 6 8
EQUALSEQUALS         : 37
GREATERTHAN          : 34
GREATERTHANEQUALS    : 36
IDENT                : 1 6 8 13
IF                   : 9 10
INT                  : 6
LBRACE               : 2
LESSTHAN             : 33
LESSTHANEQUALS       : 35
LPAREN               : 1 7 9 10 11 17
LSHIFT               : 31
MAIN                 : 
MINUS                : 16 18 24
MOD                  : 27
NOTEQUALS            : 38
NUMBER               : 12
OR                   : 30
OROR                 : 23
PLUS                 : 21
PRINT                : 7
RBRACE               : 2
RPAREN               : 1 7 9 10 11 17
RSHIFT               : 32
SEMICOLON            : 6 7 8
TILDE                : 15 20
TIMES                : 25
VAR                  : 6
WHILE                : 11
XOR                  : 28
error                : 

Nonterminals, with rules where they appear

binop                : 14
block                : 1 9 10 10 11
expr                 : 6 7 8 9 10 11 14 14 15 16 17
program              : 0
stmt                 : 5
stmts                : 2
stmtstar             : 3 5
unop                 : 

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . DEF IDENT LPAREN RPAREN block

    DEF             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> DEF . IDENT LPAREN RPAREN block

    IDENT           shift and go to state 3


state 3

    (1) program -> DEF IDENT . LPAREN RPAREN block

    LPAREN          shift and go to state 4


state 4

    (1) program -> DEF IDENT LPAREN . RPAREN block

    RPAREN          shift and go to state 5


state 5

    (1) program -> DEF IDENT LPAREN RPAREN . block
    (2) block -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 7

    block                          shift and go to state 6

state 6

    (1) program -> DEF IDENT LPAREN RPAREN block .

    $end            reduce using rule 1 (program -> DEF IDENT LPAREN RPAREN block .)


state 7

    (2) block -> LBRACE . stmts RBRACE
    (3) stmts -> . stmtstar
    (4) stmtstar -> .
    (5) stmtstar -> . stmtstar stmt

    VAR             reduce using rule 4 (stmtstar -> .)
    PRINT           reduce using rule 4 (stmtstar -> .)
    IDENT           reduce using rule 4 (stmtstar -> .)
    IF              reduce using rule 4 (stmtstar -> .)
    WHILE           reduce using rule 4 (stmtstar -> .)
    RBRACE          reduce using rule 4 (stmtstar -> .)

    stmts                          shift and go to state 8
    stmtstar                       shift and go to state 9

state 8

    (2) block -> LBRACE stmts . RBRACE

    RBRACE          shift and go to state 10


state 9

    (3) stmts -> stmtstar .
    (5) stmtstar -> stmtstar . stmt
    (6) stmt -> . VAR IDENT EQUALS expr COLON INT SEMICOLON
    (7) stmt -> . PRINT LPAREN expr RPAREN SEMICOLON
    (8) stmt -> . IDENT EQUALS expr SEMICOLON
    (9) stmt -> . IF LPAREN expr RPAREN block
    (10) stmt -> . IF LPAREN expr RPAREN block ELSE block
    (11) stmt -> . WHILE LPAREN expr RPAREN block

    RBRACE          reduce using rule 3 (stmts -> stmtstar .)
    VAR             shift and go to state 12
    PRINT           shift and go to state 14
    IDENT           shift and go to state 13
    IF              shift and go to state 15
    WHILE           shift and go to state 16

    stmt                           shift and go to state 11

state 10

    (2) block -> LBRACE stmts RBRACE .

    $end            reduce using rule 2 (block -> LBRACE stmts RBRACE .)
    ELSE            reduce using rule 2 (block -> LBRACE stmts RBRACE .)
    VAR             reduce using rule 2 (block -> LBRACE stmts RBRACE .)
    PRINT           reduce using rule 2 (block -> LBRACE stmts RBRACE .)
    IDENT           reduce using rule 2 (block -> LBRACE stmts RBRACE .)
    IF              reduce using rule 2 (block -> LBRACE stmts RBRACE .)
    WHILE           reduce using rule 2 (block -> LBRACE stmts RBRACE .)
    RBRACE          reduce using rule 2 (block -> LBRACE stmts RBRACE .)


state 11

    (5) stmtstar -> stmtstar stmt .

    VAR             reduce using rule 5 (stmtstar -> stmtstar stmt .)
    PRINT           reduce using rule 5 (stmtstar -> stmtstar stmt .)
    IDENT           reduce using rule 5 (stmtstar -> stmtstar stmt .)
    IF              reduce using rule 5 (stmtstar -> stmtstar stmt .)
    WHILE           reduce using rule 5 (stmtstar -> stmtstar stmt .)
    RBRACE          reduce using rule 5 (stmtstar -> stmtstar stmt .)


state 12

    (6) stmt -> VAR . IDENT EQUALS expr COLON INT SEMICOLON

    IDENT           shift and go to state 17


state 13

    (8) stmt -> IDENT . EQUALS expr SEMICOLON

    EQUALS          shift and go to state 18


state 14

    (7) stmt -> PRINT . LPAREN expr RPAREN SEMICOLON

    LPAREN          shift and go to state 19


state 15

    (9) stmt -> IF . LPAREN expr RPAREN block
    (10) stmt -> IF . LPAREN expr RPAREN block ELSE block

    LPAREN          shift and go to state 20


state 16

    (11) stmt -> WHILE . LPAREN expr RPAREN block

    LPAREN          shift and go to state 21


state 17

    (6) stmt -> VAR IDENT . EQUALS expr COLON INT SEMICOLON

    EQUALS          shift and go to state 22


state 18

    (8) stmt -> IDENT EQUALS . expr SEMICOLON
    (12) expr -> . NUMBER
    (13) expr -> . IDENT
    (14) expr -> . expr binop expr
    (15) expr -> . TILDE expr
    (16) expr -> . MINUS expr
    (17) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 25
    IDENT           shift and go to state 23
    TILDE           shift and go to state 26
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 28

    expr                           shift and go to state 24

state 19

    (7) stmt -> PRINT LPAREN . expr RPAREN SEMICOLON
    (12) expr -> . NUMBER
    (13) expr -> . IDENT
    (14) expr -> . expr binop expr
    (15) expr -> . TILDE expr
    (16) expr -> . MINUS expr
    (17) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 25
    IDENT           shift and go to state 23
    TILDE           shift and go to state 26
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 28

    expr                           shift and go to state 29

state 20

    (9) stmt -> IF LPAREN . expr RPAREN block
    (10) stmt -> IF LPAREN . expr RPAREN block ELSE block
    (12) expr -> . NUMBER
    (13) expr -> . IDENT
    (14) expr -> . expr binop expr
    (15) expr -> . TILDE expr
    (16) expr -> . MINUS expr
    (17) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 25
    IDENT           shift and go to state 23
    TILDE           shift and go to state 26
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 28

    expr                           shift and go to state 30

state 21

    (11) stmt -> WHILE LPAREN . expr RPAREN block
    (12) expr -> . NUMBER
    (13) expr -> . IDENT
    (14) expr -> . expr binop expr
    (15) expr -> . TILDE expr
    (16) expr -> . MINUS expr
    (17) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 25
    IDENT           shift and go to state 23
    TILDE           shift and go to state 26
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 28

    expr                           shift and go to state 31

state 22

    (6) stmt -> VAR IDENT EQUALS . expr COLON INT SEMICOLON
    (12) expr -> . NUMBER
    (13) expr -> . IDENT
    (14) expr -> . expr binop expr
    (15) expr -> . TILDE expr
    (16) expr -> . MINUS expr
    (17) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 25
    IDENT           shift and go to state 23
    TILDE           shift and go to state 26
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 28

    expr                           shift and go to state 32

state 23

    (13) expr -> IDENT .

    SEMICOLON       reduce using rule 13 (expr -> IDENT .)
    PLUS            reduce using rule 13 (expr -> IDENT .)
    ANDAND          reduce using rule 13 (expr -> IDENT .)
    OROR            reduce using rule 13 (expr -> IDENT .)
    MINUS           reduce using rule 13 (expr -> IDENT .)
    TIMES           reduce using rule 13 (expr -> IDENT .)
    DIVIDE          reduce using rule 13 (expr -> IDENT .)
    MOD             reduce using rule 13 (expr -> IDENT .)
    XOR             reduce using rule 13 (expr -> IDENT .)
    AND             reduce using rule 13 (expr -> IDENT .)
    OR              reduce using rule 13 (expr -> IDENT .)
    LSHIFT          reduce using rule 13 (expr -> IDENT .)
    RSHIFT          reduce using rule 13 (expr -> IDENT .)
    LESSTHAN        reduce using rule 13 (expr -> IDENT .)
    GREATERTHAN     reduce using rule 13 (expr -> IDENT .)
    LESSTHANEQUALS  reduce using rule 13 (expr -> IDENT .)
    GREATERTHANEQUALS reduce using rule 13 (expr -> IDENT .)
    EQUALSEQUALS    reduce using rule 13 (expr -> IDENT .)
    NOTEQUALS       reduce using rule 13 (expr -> IDENT .)
    RPAREN          reduce using rule 13 (expr -> IDENT .)
    COLON           reduce using rule 13 (expr -> IDENT .)


state 24

    (8) stmt -> IDENT EQUALS expr . SEMICOLON
    (14) expr -> expr . binop expr
    (21) binop -> . PLUS
    (22) binop -> . ANDAND
    (23) binop -> . OROR
    (24) binop -> . MINUS
    (25) binop -> . TIMES
    (26) binop -> . DIVIDE
    (27) binop -> . MOD
    (28) binop -> . XOR
    (29) binop -> . AND
    (30) binop -> . OR
    (31) binop -> . LSHIFT
    (32) binop -> . RSHIFT
    (33) binop -> . LESSTHAN
    (34) binop -> . GREATERTHAN
    (35) binop -> . LESSTHANEQUALS
    (36) binop -> . GREATERTHANEQUALS
    (37) binop -> . EQUALSEQUALS
    (38) binop -> . NOTEQUALS

    SEMICOLON       shift and go to state 33
    PLUS            shift and go to state 35
    ANDAND          shift and go to state 36
    OROR            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    MOD             shift and go to state 41
    XOR             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    LSHIFT          shift and go to state 45
    RSHIFT          shift and go to state 46
    LESSTHAN        shift and go to state 47
    GREATERTHAN     shift and go to state 48
    LESSTHANEQUALS  shift and go to state 49
    GREATERTHANEQUALS shift and go to state 50
    EQUALSEQUALS    shift and go to state 51
    NOTEQUALS       shift and go to state 52

    binop                          shift and go to state 34

state 25

    (12) expr -> NUMBER .

    SEMICOLON       reduce using rule 12 (expr -> NUMBER .)
    PLUS            reduce using rule 12 (expr -> NUMBER .)
    ANDAND          reduce using rule 12 (expr -> NUMBER .)
    OROR            reduce using rule 12 (expr -> NUMBER .)
    MINUS           reduce using rule 12 (expr -> NUMBER .)
    TIMES           reduce using rule 12 (expr -> NUMBER .)
    DIVIDE          reduce using rule 12 (expr -> NUMBER .)
    MOD             reduce using rule 12 (expr -> NUMBER .)
    XOR             reduce using rule 12 (expr -> NUMBER .)
    AND             reduce using rule 12 (expr -> NUMBER .)
    OR              reduce using rule 12 (expr -> NUMBER .)
    LSHIFT          reduce using rule 12 (expr -> NUMBER .)
    RSHIFT          reduce using rule 12 (expr -> NUMBER .)
    LESSTHAN        reduce using rule 12 (expr -> NUMBER .)
    GREATERTHAN     reduce using rule 12 (expr -> NUMBER .)
    LESSTHANEQUALS  reduce using rule 12 (expr -> NUMBER .)
    GREATERTHANEQUALS reduce using rule 12 (expr -> NUMBER .)
    EQUALSEQUALS    reduce using rule 12 (expr -> NUMBER .)
    NOTEQUALS       reduce using rule 12 (expr -> NUMBER .)
    RPAREN          reduce using rule 12 (expr -> NUMBER .)
    COLON           reduce using rule 12 (expr -> NUMBER .)


state 26

    (15) expr -> TILDE . expr
    (12) expr -> . NUMBER
    (13) expr -> . IDENT
    (14) expr -> . expr binop expr
    (15) expr -> . TILDE expr
    (16) expr -> . MINUS expr
    (17) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 25
    IDENT           shift and go to state 23
    TILDE           shift and go to state 26
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 28

    expr                           shift and go to state 53

state 27

    (16) expr -> MINUS . expr
    (12) expr -> . NUMBER
    (13) expr -> . IDENT
    (14) expr -> . expr binop expr
    (15) expr -> . TILDE expr
    (16) expr -> . MINUS expr
    (17) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 25
    IDENT           shift and go to state 23
    TILDE           shift and go to state 26
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 28

    expr                           shift and go to state 54

state 28

    (17) expr -> LPAREN . expr RPAREN
    (12) expr -> . NUMBER
    (13) expr -> . IDENT
    (14) expr -> . expr binop expr
    (15) expr -> . TILDE expr
    (16) expr -> . MINUS expr
    (17) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 25
    IDENT           shift and go to state 23
    TILDE           shift and go to state 26
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 28

    expr                           shift and go to state 55

state 29

    (7) stmt -> PRINT LPAREN expr . RPAREN SEMICOLON
    (14) expr -> expr . binop expr
    (21) binop -> . PLUS
    (22) binop -> . ANDAND
    (23) binop -> . OROR
    (24) binop -> . MINUS
    (25) binop -> . TIMES
    (26) binop -> . DIVIDE
    (27) binop -> . MOD
    (28) binop -> . XOR
    (29) binop -> . AND
    (30) binop -> . OR
    (31) binop -> . LSHIFT
    (32) binop -> . RSHIFT
    (33) binop -> . LESSTHAN
    (34) binop -> . GREATERTHAN
    (35) binop -> . LESSTHANEQUALS
    (36) binop -> . GREATERTHANEQUALS
    (37) binop -> . EQUALSEQUALS
    (38) binop -> . NOTEQUALS

    RPAREN          shift and go to state 56
    PLUS            shift and go to state 35
    ANDAND          shift and go to state 36
    OROR            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    MOD             shift and go to state 41
    XOR             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    LSHIFT          shift and go to state 45
    RSHIFT          shift and go to state 46
    LESSTHAN        shift and go to state 47
    GREATERTHAN     shift and go to state 48
    LESSTHANEQUALS  shift and go to state 49
    GREATERTHANEQUALS shift and go to state 50
    EQUALSEQUALS    shift and go to state 51
    NOTEQUALS       shift and go to state 52

    binop                          shift and go to state 34

state 30

    (9) stmt -> IF LPAREN expr . RPAREN block
    (10) stmt -> IF LPAREN expr . RPAREN block ELSE block
    (14) expr -> expr . binop expr
    (21) binop -> . PLUS
    (22) binop -> . ANDAND
    (23) binop -> . OROR
    (24) binop -> . MINUS
    (25) binop -> . TIMES
    (26) binop -> . DIVIDE
    (27) binop -> . MOD
    (28) binop -> . XOR
    (29) binop -> . AND
    (30) binop -> . OR
    (31) binop -> . LSHIFT
    (32) binop -> . RSHIFT
    (33) binop -> . LESSTHAN
    (34) binop -> . GREATERTHAN
    (35) binop -> . LESSTHANEQUALS
    (36) binop -> . GREATERTHANEQUALS
    (37) binop -> . EQUALSEQUALS
    (38) binop -> . NOTEQUALS

    RPAREN          shift and go to state 57
    PLUS            shift and go to state 35
    ANDAND          shift and go to state 36
    OROR            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    MOD             shift and go to state 41
    XOR             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    LSHIFT          shift and go to state 45
    RSHIFT          shift and go to state 46
    LESSTHAN        shift and go to state 47
    GREATERTHAN     shift and go to state 48
    LESSTHANEQUALS  shift and go to state 49
    GREATERTHANEQUALS shift and go to state 50
    EQUALSEQUALS    shift and go to state 51
    NOTEQUALS       shift and go to state 52

    binop                          shift and go to state 34

state 31

    (11) stmt -> WHILE LPAREN expr . RPAREN block
    (14) expr -> expr . binop expr
    (21) binop -> . PLUS
    (22) binop -> . ANDAND
    (23) binop -> . OROR
    (24) binop -> . MINUS
    (25) binop -> . TIMES
    (26) binop -> . DIVIDE
    (27) binop -> . MOD
    (28) binop -> . XOR
    (29) binop -> . AND
    (30) binop -> . OR
    (31) binop -> . LSHIFT
    (32) binop -> . RSHIFT
    (33) binop -> . LESSTHAN
    (34) binop -> . GREATERTHAN
    (35) binop -> . LESSTHANEQUALS
    (36) binop -> . GREATERTHANEQUALS
    (37) binop -> . EQUALSEQUALS
    (38) binop -> . NOTEQUALS

    RPAREN          shift and go to state 58
    PLUS            shift and go to state 35
    ANDAND          shift and go to state 36
    OROR            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    MOD             shift and go to state 41
    XOR             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    LSHIFT          shift and go to state 45
    RSHIFT          shift and go to state 46
    LESSTHAN        shift and go to state 47
    GREATERTHAN     shift and go to state 48
    LESSTHANEQUALS  shift and go to state 49
    GREATERTHANEQUALS shift and go to state 50
    EQUALSEQUALS    shift and go to state 51
    NOTEQUALS       shift and go to state 52

    binop                          shift and go to state 34

state 32

    (6) stmt -> VAR IDENT EQUALS expr . COLON INT SEMICOLON
    (14) expr -> expr . binop expr
    (21) binop -> . PLUS
    (22) binop -> . ANDAND
    (23) binop -> . OROR
    (24) binop -> . MINUS
    (25) binop -> . TIMES
    (26) binop -> . DIVIDE
    (27) binop -> . MOD
    (28) binop -> . XOR
    (29) binop -> . AND
    (30) binop -> . OR
    (31) binop -> . LSHIFT
    (32) binop -> . RSHIFT
    (33) binop -> . LESSTHAN
    (34) binop -> . GREATERTHAN
    (35) binop -> . LESSTHANEQUALS
    (36) binop -> . GREATERTHANEQUALS
    (37) binop -> . EQUALSEQUALS
    (38) binop -> . NOTEQUALS

    COLON           shift and go to state 59
    PLUS            shift and go to state 35
    ANDAND          shift and go to state 36
    OROR            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    MOD             shift and go to state 41
    XOR             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    LSHIFT          shift and go to state 45
    RSHIFT          shift and go to state 46
    LESSTHAN        shift and go to state 47
    GREATERTHAN     shift and go to state 48
    LESSTHANEQUALS  shift and go to state 49
    GREATERTHANEQUALS shift and go to state 50
    EQUALSEQUALS    shift and go to state 51
    NOTEQUALS       shift and go to state 52

    binop                          shift and go to state 34

state 33

    (8) stmt -> IDENT EQUALS expr SEMICOLON .

    VAR             reduce using rule 8 (stmt -> IDENT EQUALS expr SEMICOLON .)
    PRINT           reduce using rule 8 (stmt -> IDENT EQUALS expr SEMICOLON .)
    IDENT           reduce using rule 8 (stmt -> IDENT EQUALS expr SEMICOLON .)
    IF              reduce using rule 8 (stmt -> IDENT EQUALS expr SEMICOLON .)
    WHILE           reduce using rule 8 (stmt -> IDENT EQUALS expr SEMICOLON .)
    RBRACE          reduce using rule 8 (stmt -> IDENT EQUALS expr SEMICOLON .)


state 34

    (14) expr -> expr binop . expr
    (12) expr -> . NUMBER
    (13) expr -> . IDENT
    (14) expr -> . expr binop expr
    (15) expr -> . TILDE expr
    (16) expr -> . MINUS expr
    (17) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 25
    IDENT           shift and go to state 23
    TILDE           shift and go to state 26
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 28

    expr                           shift and go to state 60

state 35

    (21) binop -> PLUS .

    NUMBER          reduce using rule 21 (binop -> PLUS .)
    IDENT           reduce using rule 21 (binop -> PLUS .)
    TILDE           reduce using rule 21 (binop -> PLUS .)
    MINUS           reduce using rule 21 (binop -> PLUS .)
    LPAREN          reduce using rule 21 (binop -> PLUS .)


state 36

    (22) binop -> ANDAND .

    NUMBER          reduce using rule 22 (binop -> ANDAND .)
    IDENT           reduce using rule 22 (binop -> ANDAND .)
    TILDE           reduce using rule 22 (binop -> ANDAND .)
    MINUS           reduce using rule 22 (binop -> ANDAND .)
    LPAREN          reduce using rule 22 (binop -> ANDAND .)


state 37

    (23) binop -> OROR .

    NUMBER          reduce using rule 23 (binop -> OROR .)
    IDENT           reduce using rule 23 (binop -> OROR .)
    TILDE           reduce using rule 23 (binop -> OROR .)
    MINUS           reduce using rule 23 (binop -> OROR .)
    LPAREN          reduce using rule 23 (binop -> OROR .)


state 38

    (24) binop -> MINUS .

    NUMBER          reduce using rule 24 (binop -> MINUS .)
    IDENT           reduce using rule 24 (binop -> MINUS .)
    TILDE           reduce using rule 24 (binop -> MINUS .)
    MINUS           reduce using rule 24 (binop -> MINUS .)
    LPAREN          reduce using rule 24 (binop -> MINUS .)


state 39

    (25) binop -> TIMES .

    NUMBER          reduce using rule 25 (binop -> TIMES .)
    IDENT           reduce using rule 25 (binop -> TIMES .)
    TILDE           reduce using rule 25 (binop -> TIMES .)
    MINUS           reduce using rule 25 (binop -> TIMES .)
    LPAREN          reduce using rule 25 (binop -> TIMES .)


state 40

    (26) binop -> DIVIDE .

    NUMBER          reduce using rule 26 (binop -> DIVIDE .)
    IDENT           reduce using rule 26 (binop -> DIVIDE .)
    TILDE           reduce using rule 26 (binop -> DIVIDE .)
    MINUS           reduce using rule 26 (binop -> DIVIDE .)
    LPAREN          reduce using rule 26 (binop -> DIVIDE .)


state 41

    (27) binop -> MOD .

    NUMBER          reduce using rule 27 (binop -> MOD .)
    IDENT           reduce using rule 27 (binop -> MOD .)
    TILDE           reduce using rule 27 (binop -> MOD .)
    MINUS           reduce using rule 27 (binop -> MOD .)
    LPAREN          reduce using rule 27 (binop -> MOD .)


state 42

    (28) binop -> XOR .

    NUMBER          reduce using rule 28 (binop -> XOR .)
    IDENT           reduce using rule 28 (binop -> XOR .)
    TILDE           reduce using rule 28 (binop -> XOR .)
    MINUS           reduce using rule 28 (binop -> XOR .)
    LPAREN          reduce using rule 28 (binop -> XOR .)


state 43

    (29) binop -> AND .

    NUMBER          reduce using rule 29 (binop -> AND .)
    IDENT           reduce using rule 29 (binop -> AND .)
    TILDE           reduce using rule 29 (binop -> AND .)
    MINUS           reduce using rule 29 (binop -> AND .)
    LPAREN          reduce using rule 29 (binop -> AND .)


state 44

    (30) binop -> OR .

    NUMBER          reduce using rule 30 (binop -> OR .)
    IDENT           reduce using rule 30 (binop -> OR .)
    TILDE           reduce using rule 30 (binop -> OR .)
    MINUS           reduce using rule 30 (binop -> OR .)
    LPAREN          reduce using rule 30 (binop -> OR .)


state 45

    (31) binop -> LSHIFT .

    NUMBER          reduce using rule 31 (binop -> LSHIFT .)
    IDENT           reduce using rule 31 (binop -> LSHIFT .)
    TILDE           reduce using rule 31 (binop -> LSHIFT .)
    MINUS           reduce using rule 31 (binop -> LSHIFT .)
    LPAREN          reduce using rule 31 (binop -> LSHIFT .)


state 46

    (32) binop -> RSHIFT .

    NUMBER          reduce using rule 32 (binop -> RSHIFT .)
    IDENT           reduce using rule 32 (binop -> RSHIFT .)
    TILDE           reduce using rule 32 (binop -> RSHIFT .)
    MINUS           reduce using rule 32 (binop -> RSHIFT .)
    LPAREN          reduce using rule 32 (binop -> RSHIFT .)


state 47

    (33) binop -> LESSTHAN .

    NUMBER          reduce using rule 33 (binop -> LESSTHAN .)
    IDENT           reduce using rule 33 (binop -> LESSTHAN .)
    TILDE           reduce using rule 33 (binop -> LESSTHAN .)
    MINUS           reduce using rule 33 (binop -> LESSTHAN .)
    LPAREN          reduce using rule 33 (binop -> LESSTHAN .)


state 48

    (34) binop -> GREATERTHAN .

    NUMBER          reduce using rule 34 (binop -> GREATERTHAN .)
    IDENT           reduce using rule 34 (binop -> GREATERTHAN .)
    TILDE           reduce using rule 34 (binop -> GREATERTHAN .)
    MINUS           reduce using rule 34 (binop -> GREATERTHAN .)
    LPAREN          reduce using rule 34 (binop -> GREATERTHAN .)


state 49

    (35) binop -> LESSTHANEQUALS .

    NUMBER          reduce using rule 35 (binop -> LESSTHANEQUALS .)
    IDENT           reduce using rule 35 (binop -> LESSTHANEQUALS .)
    TILDE           reduce using rule 35 (binop -> LESSTHANEQUALS .)
    MINUS           reduce using rule 35 (binop -> LESSTHANEQUALS .)
    LPAREN          reduce using rule 35 (binop -> LESSTHANEQUALS .)


state 50

    (36) binop -> GREATERTHANEQUALS .

    NUMBER          reduce using rule 36 (binop -> GREATERTHANEQUALS .)
    IDENT           reduce using rule 36 (binop -> GREATERTHANEQUALS .)
    TILDE           reduce using rule 36 (binop -> GREATERTHANEQUALS .)
    MINUS           reduce using rule 36 (binop -> GREATERTHANEQUALS .)
    LPAREN          reduce using rule 36 (binop -> GREATERTHANEQUALS .)


state 51

    (37) binop -> EQUALSEQUALS .

    NUMBER          reduce using rule 37 (binop -> EQUALSEQUALS .)
    IDENT           reduce using rule 37 (binop -> EQUALSEQUALS .)
    TILDE           reduce using rule 37 (binop -> EQUALSEQUALS .)
    MINUS           reduce using rule 37 (binop -> EQUALSEQUALS .)
    LPAREN          reduce using rule 37 (binop -> EQUALSEQUALS .)


state 52

    (38) binop -> NOTEQUALS .

    NUMBER          reduce using rule 38 (binop -> NOTEQUALS .)
    IDENT           reduce using rule 38 (binop -> NOTEQUALS .)
    TILDE           reduce using rule 38 (binop -> NOTEQUALS .)
    MINUS           reduce using rule 38 (binop -> NOTEQUALS .)
    LPAREN          reduce using rule 38 (binop -> NOTEQUALS .)


state 53

    (15) expr -> TILDE expr .
    (14) expr -> expr . binop expr
    (21) binop -> . PLUS
    (22) binop -> . ANDAND
    (23) binop -> . OROR
    (24) binop -> . MINUS
    (25) binop -> . TIMES
    (26) binop -> . DIVIDE
    (27) binop -> . MOD
    (28) binop -> . XOR
    (29) binop -> . AND
    (30) binop -> . OR
    (31) binop -> . LSHIFT
    (32) binop -> . RSHIFT
    (33) binop -> . LESSTHAN
    (34) binop -> . GREATERTHAN
    (35) binop -> . LESSTHANEQUALS
    (36) binop -> . GREATERTHANEQUALS
    (37) binop -> . EQUALSEQUALS
    (38) binop -> . NOTEQUALS

    SEMICOLON       reduce using rule 15 (expr -> TILDE expr .)
    PLUS            reduce using rule 15 (expr -> TILDE expr .)
    ANDAND          reduce using rule 15 (expr -> TILDE expr .)
    OROR            reduce using rule 15 (expr -> TILDE expr .)
    MINUS           reduce using rule 15 (expr -> TILDE expr .)
    TIMES           reduce using rule 15 (expr -> TILDE expr .)
    DIVIDE          reduce using rule 15 (expr -> TILDE expr .)
    MOD             reduce using rule 15 (expr -> TILDE expr .)
    XOR             reduce using rule 15 (expr -> TILDE expr .)
    AND             reduce using rule 15 (expr -> TILDE expr .)
    OR              reduce using rule 15 (expr -> TILDE expr .)
    LSHIFT          reduce using rule 15 (expr -> TILDE expr .)
    RSHIFT          reduce using rule 15 (expr -> TILDE expr .)
    LESSTHAN        reduce using rule 15 (expr -> TILDE expr .)
    GREATERTHAN     reduce using rule 15 (expr -> TILDE expr .)
    LESSTHANEQUALS  reduce using rule 15 (expr -> TILDE expr .)
    GREATERTHANEQUALS reduce using rule 15 (expr -> TILDE expr .)
    EQUALSEQUALS    reduce using rule 15 (expr -> TILDE expr .)
    NOTEQUALS       reduce using rule 15 (expr -> TILDE expr .)
    RPAREN          reduce using rule 15 (expr -> TILDE expr .)
    COLON           reduce using rule 15 (expr -> TILDE expr .)

  ! PLUS            [ shift and go to state 35 ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! MOD             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! LSHIFT          [ shift and go to state 45 ]
  ! RSHIFT          [ shift and go to state 46 ]
  ! LESSTHAN        [ shift and go to state 47 ]
  ! GREATERTHAN     [ shift and go to state 48 ]
  ! LESSTHANEQUALS  [ shift and go to state 49 ]
  ! GREATERTHANEQUALS [ shift and go to state 50 ]
  ! EQUALSEQUALS    [ shift and go to state 51 ]
  ! NOTEQUALS       [ shift and go to state 52 ]

    binop                          shift and go to state 34

state 54

    (16) expr -> MINUS expr .
    (14) expr -> expr . binop expr
    (21) binop -> . PLUS
    (22) binop -> . ANDAND
    (23) binop -> . OROR
    (24) binop -> . MINUS
    (25) binop -> . TIMES
    (26) binop -> . DIVIDE
    (27) binop -> . MOD
    (28) binop -> . XOR
    (29) binop -> . AND
    (30) binop -> . OR
    (31) binop -> . LSHIFT
    (32) binop -> . RSHIFT
    (33) binop -> . LESSTHAN
    (34) binop -> . GREATERTHAN
    (35) binop -> . LESSTHANEQUALS
    (36) binop -> . GREATERTHANEQUALS
    (37) binop -> . EQUALSEQUALS
    (38) binop -> . NOTEQUALS

    SEMICOLON       reduce using rule 16 (expr -> MINUS expr .)
    PLUS            reduce using rule 16 (expr -> MINUS expr .)
    ANDAND          reduce using rule 16 (expr -> MINUS expr .)
    OROR            reduce using rule 16 (expr -> MINUS expr .)
    MINUS           reduce using rule 16 (expr -> MINUS expr .)
    TIMES           reduce using rule 16 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 16 (expr -> MINUS expr .)
    MOD             reduce using rule 16 (expr -> MINUS expr .)
    XOR             reduce using rule 16 (expr -> MINUS expr .)
    AND             reduce using rule 16 (expr -> MINUS expr .)
    OR              reduce using rule 16 (expr -> MINUS expr .)
    LSHIFT          reduce using rule 16 (expr -> MINUS expr .)
    RSHIFT          reduce using rule 16 (expr -> MINUS expr .)
    LESSTHAN        reduce using rule 16 (expr -> MINUS expr .)
    GREATERTHAN     reduce using rule 16 (expr -> MINUS expr .)
    LESSTHANEQUALS  reduce using rule 16 (expr -> MINUS expr .)
    GREATERTHANEQUALS reduce using rule 16 (expr -> MINUS expr .)
    EQUALSEQUALS    reduce using rule 16 (expr -> MINUS expr .)
    NOTEQUALS       reduce using rule 16 (expr -> MINUS expr .)
    RPAREN          reduce using rule 16 (expr -> MINUS expr .)
    COLON           reduce using rule 16 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 35 ]
  ! ANDAND          [ shift and go to state 36 ]
  ! OROR            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! MOD             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! LSHIFT          [ shift and go to state 45 ]
  ! RSHIFT          [ shift and go to state 46 ]
  ! LESSTHAN        [ shift and go to state 47 ]
  ! GREATERTHAN     [ shift and go to state 48 ]
  ! LESSTHANEQUALS  [ shift and go to state 49 ]
  ! GREATERTHANEQUALS [ shift and go to state 50 ]
  ! EQUALSEQUALS    [ shift and go to state 51 ]
  ! NOTEQUALS       [ shift and go to state 52 ]

    binop                          shift and go to state 34

state 55

    (17) expr -> LPAREN expr . RPAREN
    (14) expr -> expr . binop expr
    (21) binop -> . PLUS
    (22) binop -> . ANDAND
    (23) binop -> . OROR
    (24) binop -> . MINUS
    (25) binop -> . TIMES
    (26) binop -> . DIVIDE
    (27) binop -> . MOD
    (28) binop -> . XOR
    (29) binop -> . AND
    (30) binop -> . OR
    (31) binop -> . LSHIFT
    (32) binop -> . RSHIFT
    (33) binop -> . LESSTHAN
    (34) binop -> . GREATERTHAN
    (35) binop -> . LESSTHANEQUALS
    (36) binop -> . GREATERTHANEQUALS
    (37) binop -> . EQUALSEQUALS
    (38) binop -> . NOTEQUALS

    RPAREN          shift and go to state 61
    PLUS            shift and go to state 35
    ANDAND          shift and go to state 36
    OROR            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    MOD             shift and go to state 41
    XOR             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    LSHIFT          shift and go to state 45
    RSHIFT          shift and go to state 46
    LESSTHAN        shift and go to state 47
    GREATERTHAN     shift and go to state 48
    LESSTHANEQUALS  shift and go to state 49
    GREATERTHANEQUALS shift and go to state 50
    EQUALSEQUALS    shift and go to state 51
    NOTEQUALS       shift and go to state 52

    binop                          shift and go to state 34

state 56

    (7) stmt -> PRINT LPAREN expr RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 62


state 57

    (9) stmt -> IF LPAREN expr RPAREN . block
    (10) stmt -> IF LPAREN expr RPAREN . block ELSE block
    (2) block -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 7

    block                          shift and go to state 63

state 58

    (11) stmt -> WHILE LPAREN expr RPAREN . block
    (2) block -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 7

    block                          shift and go to state 64

state 59

    (6) stmt -> VAR IDENT EQUALS expr COLON . INT SEMICOLON

    INT             shift and go to state 65


state 60

    (14) expr -> expr binop expr .
    (14) expr -> expr . binop expr
    (21) binop -> . PLUS
    (22) binop -> . ANDAND
    (23) binop -> . OROR
    (24) binop -> . MINUS
    (25) binop -> . TIMES
    (26) binop -> . DIVIDE
    (27) binop -> . MOD
    (28) binop -> . XOR
    (29) binop -> . AND
    (30) binop -> . OR
    (31) binop -> . LSHIFT
    (32) binop -> . RSHIFT
    (33) binop -> . LESSTHAN
    (34) binop -> . GREATERTHAN
    (35) binop -> . LESSTHANEQUALS
    (36) binop -> . GREATERTHANEQUALS
    (37) binop -> . EQUALSEQUALS
    (38) binop -> . NOTEQUALS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUALS resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUALS resolved as shift
  ! shift/reduce conflict for EQUALSEQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    SEMICOLON       reduce using rule 14 (expr -> expr binop expr .)
    RPAREN          reduce using rule 14 (expr -> expr binop expr .)
    COLON           reduce using rule 14 (expr -> expr binop expr .)
    PLUS            shift and go to state 35
    ANDAND          shift and go to state 36
    OROR            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    MOD             shift and go to state 41
    XOR             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    LSHIFT          shift and go to state 45
    RSHIFT          shift and go to state 46
    LESSTHAN        shift and go to state 47
    GREATERTHAN     shift and go to state 48
    LESSTHANEQUALS  shift and go to state 49
    GREATERTHANEQUALS shift and go to state 50
    EQUALSEQUALS    shift and go to state 51
    NOTEQUALS       shift and go to state 52

  ! PLUS            [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! ANDAND          [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! OROR            [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! MINUS           [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! TIMES           [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! DIVIDE          [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! MOD             [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! XOR             [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! AND             [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! OR              [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! LSHIFT          [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! RSHIFT          [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! LESSTHAN        [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! GREATERTHAN     [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! LESSTHANEQUALS  [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! GREATERTHANEQUALS [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! EQUALSEQUALS    [ reduce using rule 14 (expr -> expr binop expr .) ]
  ! NOTEQUALS       [ reduce using rule 14 (expr -> expr binop expr .) ]

    binop                          shift and go to state 34

state 61

    (17) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    OROR            reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    XOR             reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    LSHIFT          reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    RSHIFT          reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    LESSTHAN        reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    GREATERTHAN     reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    LESSTHANEQUALS  reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    GREATERTHANEQUALS reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    EQUALSEQUALS    reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    NOTEQUALS       reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 17 (expr -> LPAREN expr RPAREN .)


state 62

    (7) stmt -> PRINT LPAREN expr RPAREN SEMICOLON .

    VAR             reduce using rule 7 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    PRINT           reduce using rule 7 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    IDENT           reduce using rule 7 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    IF              reduce using rule 7 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    WHILE           reduce using rule 7 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)
    RBRACE          reduce using rule 7 (stmt -> PRINT LPAREN expr RPAREN SEMICOLON .)


state 63

    (9) stmt -> IF LPAREN expr RPAREN block .
    (10) stmt -> IF LPAREN expr RPAREN block . ELSE block

    VAR             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN block .)
    PRINT           reduce using rule 9 (stmt -> IF LPAREN expr RPAREN block .)
    IDENT           reduce using rule 9 (stmt -> IF LPAREN expr RPAREN block .)
    IF              reduce using rule 9 (stmt -> IF LPAREN expr RPAREN block .)
    WHILE           reduce using rule 9 (stmt -> IF LPAREN expr RPAREN block .)
    RBRACE          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN block .)
    ELSE            shift and go to state 66


state 64

    (11) stmt -> WHILE LPAREN expr RPAREN block .

    VAR             reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN block .)
    PRINT           reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN block .)
    IDENT           reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN block .)
    IF              reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN block .)
    WHILE           reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN block .)
    RBRACE          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN block .)


state 65

    (6) stmt -> VAR IDENT EQUALS expr COLON INT . SEMICOLON

    SEMICOLON       shift and go to state 67


state 66

    (10) stmt -> IF LPAREN expr RPAREN block ELSE . block
    (2) block -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 7

    block                          shift and go to state 68

state 67

    (6) stmt -> VAR IDENT EQUALS expr COLON INT SEMICOLON .

    VAR             reduce using rule 6 (stmt -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    PRINT           reduce using rule 6 (stmt -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    IDENT           reduce using rule 6 (stmt -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    IF              reduce using rule 6 (stmt -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    WHILE           reduce using rule 6 (stmt -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)
    RBRACE          reduce using rule 6 (stmt -> VAR IDENT EQUALS expr COLON INT SEMICOLON .)


state 68

    (10) stmt -> IF LPAREN expr RPAREN block ELSE block .

    VAR             reduce using rule 10 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    PRINT           reduce using rule 10 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    IDENT           reduce using rule 10 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    IF              reduce using rule 10 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    WHILE           reduce using rule 10 (stmt -> IF LPAREN expr RPAREN block ELSE block .)
    RBRACE          reduce using rule 10 (stmt -> IF LPAREN expr RPAREN block ELSE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 60 resolved as shift
WARNING: shift/reduce conflict for OROR in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 60 resolved as shift
WARNING: shift/reduce conflict for MOD in state 60 resolved as shift
WARNING: shift/reduce conflict for XOR in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
WARNING: shift/reduce conflict for OR in state 60 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 60 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUALS in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUALS in state 60 resolved as shift
WARNING: shift/reduce conflict for EQUALSEQUALS in state 60 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 60 resolved as shift
