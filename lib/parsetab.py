
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORORleftANDANDleftORleftXORleftANDnonassocEQUALSEQUALSNOTEQUALSnonassocLESSTHANLESSTHANEQUALSGREATERTHANGREATERTHANEQUALSleftLSHIFTRSHIFTleftPLUSMINUSleftTIMESDIVIDEMODrightTILDErightUMINUSBANGAND ANDAND BANG COLON COMMENT DEF DIVIDE ELSE EQUALS EQUALSEQUALS FALSE GREATERTHAN GREATERTHANEQUALS IDENT IF INT LBRACE LESSTHAN LESSTHANEQUALS LPAREN LSHIFT MAIN MINUS MOD NOTEQUALS NUMBER OR OROR PLUS PRINT RBRACE RPAREN RSHIFT SEMICOLON TILDE TIMES TRUE VAR WHILE XORprogram : DEF IDENT LPAREN RPAREN blockblock : LBRACE stmts RBRACEstmts : stmtstarstmtstar :\n    | stmtstar stmtstmt : VAR IDENT EQUALS expr COLON INT SEMICOLONstmt : PRINT LPAREN expr RPAREN SEMICOLONstmt : IDENT EQUALS expr SEMICOLON\n    stmt : IF LPAREN expr RPAREN block\n    stmt : IF LPAREN expr RPAREN block ELSE blockstmt : WHILE LPAREN expr RPAREN blockexpr : NUMBERexpr : TRUE\n    | FALSE\n    expr : IDENTexpr : TILDE expr\n    | MINUS expr %prec UMINUS\n    | BANG expr\n    expr : LPAREN expr RPARENexpr : expr ANDAND expr\n    | expr PLUS expr\n    | expr OROR expr\n    | expr MINUS expr\n    | expr TIMES expr\n    | expr DIVIDE expr\n    | expr EQUALSEQUALS expr\n    | expr MOD expr\n    | expr XOR expr\n    | expr AND expr\n    | expr OR expr\n    | expr LSHIFT expr\n    | expr RSHIFT expr\n    | expr LESSTHAN expr\n    | expr GREATERTHAN expr\n    | expr LESSTHANEQUALS expr\n    | expr GREATERTHANEQUALS expr\n    | expr NOTEQUALS expr\n    '
    
_lr_action_items = {'DEF':([0,],[2,]),'$end':([1,6,10,],[0,-1,-2,]),'IDENT':([2,7,9,10,11,12,18,19,20,21,22,28,29,30,31,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,82,83,84,87,88,],[3,-4,13,-2,-5,17,23,23,23,23,23,23,23,23,23,-8,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-7,-9,-11,-6,-10,]),'LPAREN':([3,14,15,16,18,19,20,21,22,28,29,30,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[4,19,20,21,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'RPAREN':([4,23,25,26,27,32,33,34,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[5,-15,-12,-13,-14,59,60,61,-16,-17,-18,81,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-19,]),'LBRACE':([5,60,61,86,],[7,7,7,7,]),'VAR':([7,9,10,11,36,82,83,84,87,88,],[-4,12,-2,-5,-8,-7,-9,-11,-6,-10,]),'PRINT':([7,9,10,11,36,82,83,84,87,88,],[-4,14,-2,-5,-8,-7,-9,-11,-6,-10,]),'IF':([7,9,10,11,36,82,83,84,87,88,],[-4,15,-2,-5,-8,-7,-9,-11,-6,-10,]),'WHILE':([7,9,10,11,36,82,83,84,87,88,],[-4,16,-2,-5,-8,-7,-9,-11,-6,-10,]),'RBRACE':([7,8,9,10,11,36,82,83,84,87,88,],[-4,10,-3,-2,-5,-8,-7,-9,-11,-6,-10,]),'ELSE':([10,83,],[-2,86,]),'EQUALS':([13,17,],[18,22,]),'NUMBER':([18,19,20,21,22,28,29,30,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'TRUE':([18,19,20,21,22,28,29,30,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'FALSE':([18,19,20,21,22,28,29,30,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'TILDE':([18,19,20,21,22,28,29,30,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'MINUS':([18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[29,29,29,29,29,-15,40,-12,-13,-14,29,29,29,29,40,40,40,40,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-16,-17,-18,40,40,-21,40,-23,-24,-25,40,-27,40,40,40,40,40,40,40,40,40,40,-19,]),'BANG':([18,19,20,21,22,28,29,30,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'SEMICOLON':([23,24,25,26,27,55,56,57,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,],[-15,36,-12,-13,-14,-16,-17,-18,82,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-19,87,]),'ANDAND':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,37,-12,-13,-14,37,37,37,37,-16,-17,-18,37,-20,-21,37,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-19,]),'PLUS':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,38,-12,-13,-14,38,38,38,38,-16,-17,-18,38,38,-21,38,-23,-24,-25,38,-27,38,38,38,38,38,38,38,38,38,38,-19,]),'OROR':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,39,-12,-13,-14,39,39,39,39,-16,-17,-18,39,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-19,]),'TIMES':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,41,-12,-13,-14,41,41,41,41,-16,-17,-18,41,41,41,41,41,-24,-25,41,-27,41,41,41,41,41,41,41,41,41,41,-19,]),'DIVIDE':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,42,-12,-13,-14,42,42,42,42,-16,-17,-18,42,42,42,42,42,-24,-25,42,-27,42,42,42,42,42,42,42,42,42,42,-19,]),'EQUALSEQUALS':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,43,-12,-13,-14,43,43,43,43,-16,-17,-18,43,43,-21,43,-23,-24,-25,None,-27,43,43,43,-31,-32,-33,-34,-35,-36,None,-19,]),'MOD':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,44,-12,-13,-14,44,44,44,44,-16,-17,-18,44,44,44,44,44,-24,-25,44,-27,44,44,44,44,44,44,44,44,44,44,-19,]),'XOR':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,45,-12,-13,-14,45,45,45,45,-16,-17,-18,45,45,-21,45,-23,-24,-25,-26,-27,-28,-29,45,-31,-32,-33,-34,-35,-36,-37,-19,]),'AND':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,46,-12,-13,-14,46,46,46,46,-16,-17,-18,46,46,-21,46,-23,-24,-25,-26,-27,46,-29,46,-31,-32,-33,-34,-35,-36,-37,-19,]),'OR':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,47,-12,-13,-14,47,47,47,47,-16,-17,-18,47,47,-21,47,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-19,]),'LSHIFT':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,48,-12,-13,-14,48,48,48,48,-16,-17,-18,48,48,-21,48,-23,-24,-25,48,-27,48,48,48,-31,-32,48,48,48,48,48,-19,]),'RSHIFT':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,49,-12,-13,-14,49,49,49,49,-16,-17,-18,49,49,-21,49,-23,-24,-25,49,-27,49,49,49,-31,-32,49,49,49,49,49,-19,]),'LESSTHAN':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,50,-12,-13,-14,50,50,50,50,-16,-17,-18,50,50,-21,50,-23,-24,-25,50,-27,50,50,50,-31,-32,None,None,None,None,50,-19,]),'GREATERTHAN':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,51,-12,-13,-14,51,51,51,51,-16,-17,-18,51,51,-21,51,-23,-24,-25,51,-27,51,51,51,-31,-32,None,None,None,None,51,-19,]),'LESSTHANEQUALS':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,52,-12,-13,-14,52,52,52,52,-16,-17,-18,52,52,-21,52,-23,-24,-25,52,-27,52,52,52,-31,-32,None,None,None,None,52,-19,]),'GREATERTHANEQUALS':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,53,-12,-13,-14,53,53,53,53,-16,-17,-18,53,53,-21,53,-23,-24,-25,53,-27,53,53,53,-31,-32,None,None,None,None,53,-19,]),'NOTEQUALS':([23,24,25,26,27,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,54,-12,-13,-14,54,54,54,54,-16,-17,-18,54,54,-21,54,-23,-24,-25,None,-27,54,54,54,-31,-32,-33,-34,-35,-36,None,-19,]),'COLON':([23,25,26,27,35,55,56,57,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[-15,-12,-13,-14,62,-16,-17,-18,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-19,]),'INT':([62,],[85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([5,60,61,86,],[6,83,84,88,]),'stmts':([7,],[8,]),'stmtstar':([7,],[9,]),'stmt':([9,],[11,]),'expr':([18,19,20,21,22,28,29,30,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[24,32,33,34,35,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> DEF IDENT LPAREN RPAREN block','program',5,'p_program','parser.py',24),
  ('block -> LBRACE stmts RBRACE','block',3,'p_block','parser.py',29),
  ('stmts -> stmtstar','stmts',1,'p_stmts','parser.py',34),
  ('stmtstar -> <empty>','stmtstar',0,'p_stmtstar','parser.py',39),
  ('stmtstar -> stmtstar stmt','stmtstar',2,'p_stmtstar','parser.py',40),
  ('stmt -> VAR IDENT EQUALS expr COLON INT SEMICOLON','stmt',7,'p_stmt_vardecl','parser.py',49),
  ('stmt -> PRINT LPAREN expr RPAREN SEMICOLON','stmt',5,'p_stmt_print','parser.py',54),
  ('stmt -> IDENT EQUALS expr SEMICOLON','stmt',4,'p_stmt_assign','parser.py',59),
  ('stmt -> IF LPAREN expr RPAREN block','stmt',5,'p_stmt_if_then','parser.py',65),
  ('stmt -> IF LPAREN expr RPAREN block ELSE block','stmt',7,'p_stmt_if_else','parser.py',71),
  ('stmt -> WHILE LPAREN expr RPAREN block','stmt',5,'p_stmt_while','parser.py',76),
  ('expr -> NUMBER','expr',1,'p_expr_number','parser.py',81),
  ('expr -> TRUE','expr',1,'p_expr_bool','parser.py',85),
  ('expr -> FALSE','expr',1,'p_expr_bool','parser.py',86),
  ('expr -> IDENT','expr',1,'p_expr_ident','parser.py',93),
  ('expr -> TILDE expr','expr',2,'p_expr_unop','parser.py',100),
  ('expr -> MINUS expr','expr',2,'p_expr_unop','parser.py',101),
  ('expr -> BANG expr','expr',2,'p_expr_unop','parser.py',102),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_parens','parser.py',113),
  ('expr -> expr ANDAND expr','expr',3,'p_expr_binop','parser.py',117),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binop','parser.py',118),
  ('expr -> expr OROR expr','expr',3,'p_expr_binop','parser.py',119),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binop','parser.py',120),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binop','parser.py',121),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binop','parser.py',122),
  ('expr -> expr EQUALSEQUALS expr','expr',3,'p_expr_binop','parser.py',123),
  ('expr -> expr MOD expr','expr',3,'p_expr_binop','parser.py',124),
  ('expr -> expr XOR expr','expr',3,'p_expr_binop','parser.py',125),
  ('expr -> expr AND expr','expr',3,'p_expr_binop','parser.py',126),
  ('expr -> expr OR expr','expr',3,'p_expr_binop','parser.py',127),
  ('expr -> expr LSHIFT expr','expr',3,'p_expr_binop','parser.py',128),
  ('expr -> expr RSHIFT expr','expr',3,'p_expr_binop','parser.py',129),
  ('expr -> expr LESSTHAN expr','expr',3,'p_expr_binop','parser.py',130),
  ('expr -> expr GREATERTHAN expr','expr',3,'p_expr_binop','parser.py',131),
  ('expr -> expr LESSTHANEQUALS expr','expr',3,'p_expr_binop','parser.py',132),
  ('expr -> expr GREATERTHANEQUALS expr','expr',3,'p_expr_binop','parser.py',133),
  ('expr -> expr NOTEQUALS expr','expr',3,'p_expr_binop','parser.py',134),
]
