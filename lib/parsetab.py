
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORORleftANDANDleftORleftXORleftANDnonassocEQUALSEQUALSNOTEQUALSnonassocLESSTHANLESSTHANEQUALSGREATERTHANGREATERTHANEQUALSleftLSHIFTRSHIFTleftPLUSMINUSleftTIMESDIVIDEMODrightTILDErightUMINUSBANGAND ANDAND BANG COLON COMMENT DEF DIVIDE EQUALS EQUALSEQUALS GREATERTHAN GREATERTHANEQUALS IDENT INT LBRACE LESSTHAN LESSTHANEQUALS LPAREN LSHIFT MAIN MINUS MOD NOTEQUALS NUMBER OR OROR PLUS PRINT RBRACE RPAREN RSHIFT SEMICOLON TILDE TIMES VAR XORprogram : DEF IDENT LPAREN RPAREN LBRACE stmts RBRACEstmts : stmtstarstmtstar : \n                | stmtstar stmtstmt : VAR IDENT EQUALS NUMBER COLON INT SEMICOLONstmt : PRINT LPAREN expr RPAREN SEMICOLONstmt : IDENT EQUALS expr SEMICOLONexpr : NUMBERexpr : IDENTexpr : expr binop exprexpr : TILDE expr\n        | MINUS expr %prec UMINUSexpr : LPAREN expr RPARENunop : MINUSunop : BANGunop : TILDE\n    binop : PLUS\n          | ANDAND\n          | OROR\n          | MINUS\n          | TIMES\n          | DIVIDE\n          | MOD\n          | XOR\n          | AND\n          | OR\n          | LSHIFT\n          | RSHIFT\n          | LESSTHAN\n          | GREATERTHAN\n          | LESSTHANEQUALS\n          | GREATERTHANEQUALS\n          | EQUALSEQUALS\n          | NOTEQUALS\n    '
    
_lr_action_items = {'DEF':([0,],[2,]),'$end':([1,9,],[0,-1,]),'IDENT':([2,6,8,10,11,15,16,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,53,55,],[3,-3,12,-4,14,18,18,18,18,18,-7,18,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-6,-5,]),'LPAREN':([3,13,15,16,21,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[4,16,23,23,23,23,23,23,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,]),'RPAREN':([4,18,20,24,46,47,48,51,52,],[5,-9,-8,49,-11,-12,52,-10,-13,]),'LBRACE':([5,],[6,]),'VAR':([6,8,10,26,53,55,],[-3,11,-4,-7,-6,-5,]),'PRINT':([6,8,10,26,53,55,],[-3,13,-4,-7,-6,-5,]),'RBRACE':([6,7,8,10,26,53,55,],[-3,9,-2,-4,-7,-6,-5,]),'EQUALS':([12,14,],[15,17,]),'NUMBER':([15,16,17,21,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[20,20,25,20,20,20,20,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,]),'TILDE':([15,16,21,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[21,21,21,21,21,21,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,]),'MINUS':([15,16,18,19,20,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[22,22,-9,31,-8,22,22,22,31,22,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-11,-12,31,31,-13,]),'SEMICOLON':([18,19,20,46,47,49,51,52,54,],[-9,26,-8,-11,-12,53,-10,-13,55,]),'PLUS':([18,19,20,24,46,47,48,51,52,],[-9,28,-8,28,-11,-12,28,28,-13,]),'ANDAND':([18,19,20,24,46,47,48,51,52,],[-9,29,-8,29,-11,-12,29,29,-13,]),'OROR':([18,19,20,24,46,47,48,51,52,],[-9,30,-8,30,-11,-12,30,30,-13,]),'TIMES':([18,19,20,24,46,47,48,51,52,],[-9,32,-8,32,-11,-12,32,32,-13,]),'DIVIDE':([18,19,20,24,46,47,48,51,52,],[-9,33,-8,33,-11,-12,33,33,-13,]),'MOD':([18,19,20,24,46,47,48,51,52,],[-9,34,-8,34,-11,-12,34,34,-13,]),'XOR':([18,19,20,24,46,47,48,51,52,],[-9,35,-8,35,-11,-12,35,35,-13,]),'AND':([18,19,20,24,46,47,48,51,52,],[-9,36,-8,36,-11,-12,36,36,-13,]),'OR':([18,19,20,24,46,47,48,51,52,],[-9,37,-8,37,-11,-12,37,37,-13,]),'LSHIFT':([18,19,20,24,46,47,48,51,52,],[-9,38,-8,38,-11,-12,38,38,-13,]),'RSHIFT':([18,19,20,24,46,47,48,51,52,],[-9,39,-8,39,-11,-12,39,39,-13,]),'LESSTHAN':([18,19,20,24,46,47,48,51,52,],[-9,40,-8,40,-11,-12,40,40,-13,]),'GREATERTHAN':([18,19,20,24,46,47,48,51,52,],[-9,41,-8,41,-11,-12,41,41,-13,]),'LESSTHANEQUALS':([18,19,20,24,46,47,48,51,52,],[-9,42,-8,42,-11,-12,42,42,-13,]),'GREATERTHANEQUALS':([18,19,20,24,46,47,48,51,52,],[-9,43,-8,43,-11,-12,43,43,-13,]),'EQUALSEQUALS':([18,19,20,24,46,47,48,51,52,],[-9,44,-8,44,-11,-12,44,44,-13,]),'NOTEQUALS':([18,19,20,24,46,47,48,51,52,],[-9,45,-8,45,-11,-12,45,45,-13,]),'COLON':([25,],[50,]),'INT':([50,],[54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([6,],[7,]),'stmtstar':([6,],[8,]),'stmt':([8,],[10,]),'expr':([15,16,21,22,23,27,],[19,24,46,47,48,51,]),'binop':([19,24,46,47,48,51,],[27,27,27,27,27,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> DEF IDENT LPAREN RPAREN LBRACE stmts RBRACE','program',7,'p_program','parser.py',23),
  ('stmts -> stmtstar','stmts',1,'p_stmts','parser.py',27),
  ('stmtstar -> <empty>','stmtstar',0,'p_stmtstar','parser.py',31),
  ('stmtstar -> stmtstar stmt','stmtstar',2,'p_stmtstar','parser.py',32),
  ('stmt -> VAR IDENT EQUALS NUMBER COLON INT SEMICOLON','stmt',7,'p_stmt_vardecl','parser.py',40),
  ('stmt -> PRINT LPAREN expr RPAREN SEMICOLON','stmt',5,'p_stmt_print','parser.py',44),
  ('stmt -> IDENT EQUALS expr SEMICOLON','stmt',4,'p_stmt_assign','parser.py',48),
  ('expr -> NUMBER','expr',1,'p_expr_number','parser.py',52),
  ('expr -> IDENT','expr',1,'p_expr_ident','parser.py',56),
  ('expr -> expr binop expr','expr',3,'p_expr_binop','parser.py',60),
  ('expr -> TILDE expr','expr',2,'p_expr_unop','parser.py',64),
  ('expr -> MINUS expr','expr',2,'p_expr_unop','parser.py',65),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_parens','parser.py',72),
  ('unop -> MINUS','unop',1,'p_unop_opp','parser.py',76),
  ('unop -> BANG','unop',1,'p_unop_bopp','parser.py',80),
  ('unop -> TILDE','unop',1,'p_unop_neg','parser.py',84),
  ('binop -> PLUS','binop',1,'p_binop_plus','parser.py',89),
  ('binop -> ANDAND','binop',1,'p_binop_plus','parser.py',90),
  ('binop -> OROR','binop',1,'p_binop_plus','parser.py',91),
  ('binop -> MINUS','binop',1,'p_binop_plus','parser.py',92),
  ('binop -> TIMES','binop',1,'p_binop_plus','parser.py',93),
  ('binop -> DIVIDE','binop',1,'p_binop_plus','parser.py',94),
  ('binop -> MOD','binop',1,'p_binop_plus','parser.py',95),
  ('binop -> XOR','binop',1,'p_binop_plus','parser.py',96),
  ('binop -> AND','binop',1,'p_binop_plus','parser.py',97),
  ('binop -> OR','binop',1,'p_binop_plus','parser.py',98),
  ('binop -> LSHIFT','binop',1,'p_binop_plus','parser.py',99),
  ('binop -> RSHIFT','binop',1,'p_binop_plus','parser.py',100),
  ('binop -> LESSTHAN','binop',1,'p_binop_plus','parser.py',101),
  ('binop -> GREATERTHAN','binop',1,'p_binop_plus','parser.py',102),
  ('binop -> LESSTHANEQUALS','binop',1,'p_binop_plus','parser.py',103),
  ('binop -> GREATERTHANEQUALS','binop',1,'p_binop_plus','parser.py',104),
  ('binop -> EQUALSEQUALS','binop',1,'p_binop_plus','parser.py',105),
  ('binop -> NOTEQUALS','binop',1,'p_binop_plus','parser.py',106),
]
